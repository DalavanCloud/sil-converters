//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DChartHelper
{
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DiscourseChartDataClass : DataSet {
        
        private DiscourseChartDataDataTable tableDiscourseChartData;
        
        private FontsDataTable tableFonts;
        
        private VernacularFontDataTable tableVernacularFont;
        
        private TransliterationFontDataTable tableTransliterationFont;
        
        private GlossFontDataTable tableGlossFont;
        
        private DiscourseClauseDataTable tableDiscourseClause;
        
        private VernacularDataTable tableVernacular;
        
        private TransliterationDataTable tableTransliteration;
        
        private GlossDataTable tableGloss;
        
        private DataRelation relationFonts_VernacularFont;
        
        private DataRelation relationFonts_TransliterationFont;
        
        private DataRelation relationFonts_GlossFont;
        
        private DataRelation relationDiscourseClause_Vernacular;
        
        private DataRelation relationDiscourseClause_Transliteration;
        
        private DataRelation relationDiscourseClause_Gloss;
        
        private DataRelation relationDiscourseChartData_Fonts;
        
        private DataRelation relationDiscourseChartData_DiscourseClause;
        
        public DiscourseChartDataClass() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DiscourseChartDataClass(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DiscourseChartData"] != null)) {
                    this.Tables.Add(new DiscourseChartDataDataTable(ds.Tables["DiscourseChartData"]));
                }
                if ((ds.Tables["Fonts"] != null)) {
                    this.Tables.Add(new FontsDataTable(ds.Tables["Fonts"]));
                }
                if ((ds.Tables["VernacularFont"] != null)) {
                    this.Tables.Add(new VernacularFontDataTable(ds.Tables["VernacularFont"]));
                }
                if ((ds.Tables["TransliterationFont"] != null)) {
                    this.Tables.Add(new TransliterationFontDataTable(ds.Tables["TransliterationFont"]));
                }
                if ((ds.Tables["GlossFont"] != null)) {
                    this.Tables.Add(new GlossFontDataTable(ds.Tables["GlossFont"]));
                }
                if ((ds.Tables["DiscourseClause"] != null)) {
                    this.Tables.Add(new DiscourseClauseDataTable(ds.Tables["DiscourseClause"]));
                }
                if ((ds.Tables["Vernacular"] != null)) {
                    this.Tables.Add(new VernacularDataTable(ds.Tables["Vernacular"]));
                }
                if ((ds.Tables["Transliteration"] != null)) {
                    this.Tables.Add(new TransliterationDataTable(ds.Tables["Transliteration"]));
                }
                if ((ds.Tables["Gloss"] != null)) {
                    this.Tables.Add(new GlossDataTable(ds.Tables["Gloss"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DiscourseChartDataDataTable DiscourseChartData {
            get {
                return this.tableDiscourseChartData;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FontsDataTable Fonts {
            get {
                return this.tableFonts;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VernacularFontDataTable VernacularFont {
            get {
                return this.tableVernacularFont;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TransliterationFontDataTable TransliterationFont {
            get {
                return this.tableTransliterationFont;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GlossFontDataTable GlossFont {
            get {
                return this.tableGlossFont;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DiscourseClauseDataTable DiscourseClause {
            get {
                return this.tableDiscourseClause;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VernacularDataTable Vernacular {
            get {
                return this.tableVernacular;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TransliterationDataTable Transliteration {
            get {
                return this.tableTransliteration;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GlossDataTable Gloss {
            get {
                return this.tableGloss;
            }
        }
        
        public override DataSet Clone() {
            DiscourseChartDataClass cln = ((DiscourseChartDataClass)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["DiscourseChartData"] != null)) {
                this.Tables.Add(new DiscourseChartDataDataTable(ds.Tables["DiscourseChartData"]));
            }
            if ((ds.Tables["Fonts"] != null)) {
                this.Tables.Add(new FontsDataTable(ds.Tables["Fonts"]));
            }
            if ((ds.Tables["VernacularFont"] != null)) {
                this.Tables.Add(new VernacularFontDataTable(ds.Tables["VernacularFont"]));
            }
            if ((ds.Tables["TransliterationFont"] != null)) {
                this.Tables.Add(new TransliterationFontDataTable(ds.Tables["TransliterationFont"]));
            }
            if ((ds.Tables["GlossFont"] != null)) {
                this.Tables.Add(new GlossFontDataTable(ds.Tables["GlossFont"]));
            }
            if ((ds.Tables["DiscourseClause"] != null)) {
                this.Tables.Add(new DiscourseClauseDataTable(ds.Tables["DiscourseClause"]));
            }
            if ((ds.Tables["Vernacular"] != null)) {
                this.Tables.Add(new VernacularDataTable(ds.Tables["Vernacular"]));
            }
            if ((ds.Tables["Transliteration"] != null)) {
                this.Tables.Add(new TransliterationDataTable(ds.Tables["Transliteration"]));
            }
            if ((ds.Tables["Gloss"] != null)) {
                this.Tables.Add(new GlossDataTable(ds.Tables["Gloss"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableDiscourseChartData = ((DiscourseChartDataDataTable)(this.Tables["DiscourseChartData"]));
            if ((this.tableDiscourseChartData != null)) {
                this.tableDiscourseChartData.InitVars();
            }
            this.tableFonts = ((FontsDataTable)(this.Tables["Fonts"]));
            if ((this.tableFonts != null)) {
                this.tableFonts.InitVars();
            }
            this.tableVernacularFont = ((VernacularFontDataTable)(this.Tables["VernacularFont"]));
            if ((this.tableVernacularFont != null)) {
                this.tableVernacularFont.InitVars();
            }
            this.tableTransliterationFont = ((TransliterationFontDataTable)(this.Tables["TransliterationFont"]));
            if ((this.tableTransliterationFont != null)) {
                this.tableTransliterationFont.InitVars();
            }
            this.tableGlossFont = ((GlossFontDataTable)(this.Tables["GlossFont"]));
            if ((this.tableGlossFont != null)) {
                this.tableGlossFont.InitVars();
            }
            this.tableDiscourseClause = ((DiscourseClauseDataTable)(this.Tables["DiscourseClause"]));
            if ((this.tableDiscourseClause != null)) {
                this.tableDiscourseClause.InitVars();
            }
            this.tableVernacular = ((VernacularDataTable)(this.Tables["Vernacular"]));
            if ((this.tableVernacular != null)) {
                this.tableVernacular.InitVars();
            }
            this.tableTransliteration = ((TransliterationDataTable)(this.Tables["Transliteration"]));
            if ((this.tableTransliteration != null)) {
                this.tableTransliteration.InitVars();
            }
            this.tableGloss = ((GlossDataTable)(this.Tables["Gloss"]));
            if ((this.tableGloss != null)) {
                this.tableGloss.InitVars();
            }
            this.relationFonts_VernacularFont = this.Relations["Fonts_VernacularFont"];
            this.relationFonts_TransliterationFont = this.Relations["Fonts_TransliterationFont"];
            this.relationFonts_GlossFont = this.Relations["Fonts_GlossFont"];
            this.relationDiscourseClause_Vernacular = this.Relations["DiscourseClause_Vernacular"];
            this.relationDiscourseClause_Transliteration = this.Relations["DiscourseClause_Transliteration"];
            this.relationDiscourseClause_Gloss = this.Relations["DiscourseClause_Gloss"];
            this.relationDiscourseChartData_Fonts = this.Relations["DiscourseChartData_Fonts"];
            this.relationDiscourseChartData_DiscourseClause = this.Relations["DiscourseChartData_DiscourseClause"];
        }
        
        private void InitClass() {
            this.DataSetName = "DiscourseChartDataClass";
            this.Prefix = "";
            this.Namespace = "http://www.sil.org/computing/schemas/DiscourseChartData.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableDiscourseChartData = new DiscourseChartDataDataTable();
            this.Tables.Add(this.tableDiscourseChartData);
            this.tableFonts = new FontsDataTable();
            this.Tables.Add(this.tableFonts);
            this.tableVernacularFont = new VernacularFontDataTable();
            this.Tables.Add(this.tableVernacularFont);
            this.tableTransliterationFont = new TransliterationFontDataTable();
            this.Tables.Add(this.tableTransliterationFont);
            this.tableGlossFont = new GlossFontDataTable();
            this.Tables.Add(this.tableGlossFont);
            this.tableDiscourseClause = new DiscourseClauseDataTable();
            this.Tables.Add(this.tableDiscourseClause);
            this.tableVernacular = new VernacularDataTable();
            this.Tables.Add(this.tableVernacular);
            this.tableTransliteration = new TransliterationDataTable();
            this.Tables.Add(this.tableTransliteration);
            this.tableGloss = new GlossDataTable();
            this.Tables.Add(this.tableGloss);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("DiscourseChartData_Fonts", new DataColumn[] {
                        this.tableDiscourseChartData.DiscourseChartData_IdColumn}, new DataColumn[] {
                        this.tableFonts.DiscourseChartData_IdColumn});
            this.tableFonts.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Fonts_VernacularFont", new DataColumn[] {
                        this.tableFonts.Fonts_IdColumn}, new DataColumn[] {
                        this.tableVernacularFont.Fonts_IdColumn});
            this.tableVernacularFont.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Fonts_TransliterationFont", new DataColumn[] {
                        this.tableFonts.Fonts_IdColumn}, new DataColumn[] {
                        this.tableTransliterationFont.Fonts_IdColumn});
            this.tableTransliterationFont.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Fonts_GlossFont", new DataColumn[] {
                        this.tableFonts.Fonts_IdColumn}, new DataColumn[] {
                        this.tableGlossFont.Fonts_IdColumn});
            this.tableGlossFont.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("DiscourseChartData_DiscourseClause", new DataColumn[] {
                        this.tableDiscourseChartData.DiscourseChartData_IdColumn}, new DataColumn[] {
                        this.tableDiscourseClause.DiscourseChartData_IdColumn});
            this.tableDiscourseClause.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("DiscourseClause_Vernacular", new DataColumn[] {
                        this.tableDiscourseClause.DiscourseClause_IdColumn}, new DataColumn[] {
                        this.tableVernacular.DiscourseClause_IdColumn});
            this.tableVernacular.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("DiscourseClause_Transliteration", new DataColumn[] {
                        this.tableDiscourseClause.DiscourseClause_IdColumn}, new DataColumn[] {
                        this.tableTransliteration.DiscourseClause_IdColumn});
            this.tableTransliteration.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("DiscourseClause_Gloss", new DataColumn[] {
                        this.tableDiscourseClause.DiscourseClause_IdColumn}, new DataColumn[] {
                        this.tableGloss.DiscourseClause_IdColumn});
            this.tableGloss.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationFonts_VernacularFont = new DataRelation("Fonts_VernacularFont", new DataColumn[] {
                        this.tableFonts.Fonts_IdColumn}, new DataColumn[] {
                        this.tableVernacularFont.Fonts_IdColumn}, false);
            this.relationFonts_VernacularFont.Nested = true;
            this.Relations.Add(this.relationFonts_VernacularFont);
            this.relationFonts_TransliterationFont = new DataRelation("Fonts_TransliterationFont", new DataColumn[] {
                        this.tableFonts.Fonts_IdColumn}, new DataColumn[] {
                        this.tableTransliterationFont.Fonts_IdColumn}, false);
            this.relationFonts_TransliterationFont.Nested = true;
            this.Relations.Add(this.relationFonts_TransliterationFont);
            this.relationFonts_GlossFont = new DataRelation("Fonts_GlossFont", new DataColumn[] {
                        this.tableFonts.Fonts_IdColumn}, new DataColumn[] {
                        this.tableGlossFont.Fonts_IdColumn}, false);
            this.relationFonts_GlossFont.Nested = true;
            this.Relations.Add(this.relationFonts_GlossFont);
            this.relationDiscourseClause_Vernacular = new DataRelation("DiscourseClause_Vernacular", new DataColumn[] {
                        this.tableDiscourseClause.DiscourseClause_IdColumn}, new DataColumn[] {
                        this.tableVernacular.DiscourseClause_IdColumn}, false);
            this.relationDiscourseClause_Vernacular.Nested = true;
            this.Relations.Add(this.relationDiscourseClause_Vernacular);
            this.relationDiscourseClause_Transliteration = new DataRelation("DiscourseClause_Transliteration", new DataColumn[] {
                        this.tableDiscourseClause.DiscourseClause_IdColumn}, new DataColumn[] {
                        this.tableTransliteration.DiscourseClause_IdColumn}, false);
            this.relationDiscourseClause_Transliteration.Nested = true;
            this.Relations.Add(this.relationDiscourseClause_Transliteration);
            this.relationDiscourseClause_Gloss = new DataRelation("DiscourseClause_Gloss", new DataColumn[] {
                        this.tableDiscourseClause.DiscourseClause_IdColumn}, new DataColumn[] {
                        this.tableGloss.DiscourseClause_IdColumn}, false);
            this.relationDiscourseClause_Gloss.Nested = true;
            this.Relations.Add(this.relationDiscourseClause_Gloss);
            this.relationDiscourseChartData_Fonts = new DataRelation("DiscourseChartData_Fonts", new DataColumn[] {
                        this.tableDiscourseChartData.DiscourseChartData_IdColumn}, new DataColumn[] {
                        this.tableFonts.DiscourseChartData_IdColumn}, false);
            this.relationDiscourseChartData_Fonts.Nested = true;
            this.Relations.Add(this.relationDiscourseChartData_Fonts);
            this.relationDiscourseChartData_DiscourseClause = new DataRelation("DiscourseChartData_DiscourseClause", new DataColumn[] {
                        this.tableDiscourseChartData.DiscourseChartData_IdColumn}, new DataColumn[] {
                        this.tableDiscourseClause.DiscourseChartData_IdColumn}, false);
            this.relationDiscourseChartData_DiscourseClause.Nested = true;
            this.Relations.Add(this.relationDiscourseChartData_DiscourseClause);
        }
        
        private bool ShouldSerializeDiscourseChartData() {
            return false;
        }
        
        private bool ShouldSerializeFonts() {
            return false;
        }
        
        private bool ShouldSerializeVernacularFont() {
            return false;
        }
        
        private bool ShouldSerializeTransliterationFont() {
            return false;
        }
        
        private bool ShouldSerializeGlossFont() {
            return false;
        }
        
        private bool ShouldSerializeDiscourseClause() {
            return false;
        }
        
        private bool ShouldSerializeVernacular() {
            return false;
        }
        
        private bool ShouldSerializeTransliteration() {
            return false;
        }
        
        private bool ShouldSerializeGloss() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void DiscourseChartDataRowChangeEventHandler(object sender, DiscourseChartDataRowChangeEvent e);
        
        public delegate void FontsRowChangeEventHandler(object sender, FontsRowChangeEvent e);
        
        public delegate void VernacularFontRowChangeEventHandler(object sender, VernacularFontRowChangeEvent e);
        
        public delegate void TransliterationFontRowChangeEventHandler(object sender, TransliterationFontRowChangeEvent e);
        
        public delegate void GlossFontRowChangeEventHandler(object sender, GlossFontRowChangeEvent e);
        
        public delegate void DiscourseClauseRowChangeEventHandler(object sender, DiscourseClauseRowChangeEvent e);
        
        public delegate void VernacularRowChangeEventHandler(object sender, VernacularRowChangeEvent e);
        
        public delegate void TransliterationRowChangeEventHandler(object sender, TransliterationRowChangeEvent e);
        
        public delegate void GlossRowChangeEventHandler(object sender, GlossRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DiscourseChartDataDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDisplayIndexRef;
            
            private DataColumn columnDisplayIndexPreS;
            
            private DataColumn columnDisplayIndexSubject;
            
            private DataColumn columnDisplayIndexX1;
            
            private DataColumn columnDisplayIndexX2;
            
            private DataColumn columnDisplayIndexVerb;
            
            private DataColumn columnDisplayIndexPostS;
            
            private DataColumn columnDiscourseChartData_Id;
            
            internal DiscourseChartDataDataTable() : 
                    base("DiscourseChartData") {
                this.InitClass();
            }
            
            internal DiscourseChartDataDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DisplayIndexRefColumn {
                get {
                    return this.columnDisplayIndexRef;
                }
            }
            
            internal DataColumn DisplayIndexPreSColumn {
                get {
                    return this.columnDisplayIndexPreS;
                }
            }
            
            internal DataColumn DisplayIndexSubjectColumn {
                get {
                    return this.columnDisplayIndexSubject;
                }
            }
            
            internal DataColumn DisplayIndexX1Column {
                get {
                    return this.columnDisplayIndexX1;
                }
            }
            
            internal DataColumn DisplayIndexX2Column {
                get {
                    return this.columnDisplayIndexX2;
                }
            }
            
            internal DataColumn DisplayIndexVerbColumn {
                get {
                    return this.columnDisplayIndexVerb;
                }
            }
            
            internal DataColumn DisplayIndexPostSColumn {
                get {
                    return this.columnDisplayIndexPostS;
                }
            }
            
            internal DataColumn DiscourseChartData_IdColumn {
                get {
                    return this.columnDiscourseChartData_Id;
                }
            }
            
            public DiscourseChartDataRow this[int index] {
                get {
                    return ((DiscourseChartDataRow)(this.Rows[index]));
                }
            }
            
            public event DiscourseChartDataRowChangeEventHandler DiscourseChartDataRowChanged;
            
            public event DiscourseChartDataRowChangeEventHandler DiscourseChartDataRowChanging;
            
            public event DiscourseChartDataRowChangeEventHandler DiscourseChartDataRowDeleted;
            
            public event DiscourseChartDataRowChangeEventHandler DiscourseChartDataRowDeleting;
            
            public void AddDiscourseChartDataRow(DiscourseChartDataRow row) {
                this.Rows.Add(row);
            }
            
            public DiscourseChartDataRow AddDiscourseChartDataRow(int DisplayIndexRef, int DisplayIndexPreS, int DisplayIndexSubject, int DisplayIndexX1, int DisplayIndexX2, int DisplayIndexVerb, int DisplayIndexPostS) {
                DiscourseChartDataRow rowDiscourseChartDataRow = ((DiscourseChartDataRow)(this.NewRow()));
                rowDiscourseChartDataRow.ItemArray = new object[] {
                        DisplayIndexRef,
                        DisplayIndexPreS,
                        DisplayIndexSubject,
                        DisplayIndexX1,
                        DisplayIndexX2,
                        DisplayIndexVerb,
                        DisplayIndexPostS,
                        null};
                this.Rows.Add(rowDiscourseChartDataRow);
                return rowDiscourseChartDataRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DiscourseChartDataDataTable cln = ((DiscourseChartDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DiscourseChartDataDataTable();
            }
            
            internal void InitVars() {
                this.columnDisplayIndexRef = this.Columns["DisplayIndexRef"];
                this.columnDisplayIndexPreS = this.Columns["DisplayIndexPreS"];
                this.columnDisplayIndexSubject = this.Columns["DisplayIndexSubject"];
                this.columnDisplayIndexX1 = this.Columns["DisplayIndexX1"];
                this.columnDisplayIndexX2 = this.Columns["DisplayIndexX2"];
                this.columnDisplayIndexVerb = this.Columns["DisplayIndexVerb"];
                this.columnDisplayIndexPostS = this.Columns["DisplayIndexPostS"];
                this.columnDiscourseChartData_Id = this.Columns["DiscourseChartData_Id"];
            }
            
            private void InitClass() {
                this.columnDisplayIndexRef = new DataColumn("DisplayIndexRef", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDisplayIndexRef);
                this.columnDisplayIndexPreS = new DataColumn("DisplayIndexPreS", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDisplayIndexPreS);
                this.columnDisplayIndexSubject = new DataColumn("DisplayIndexSubject", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDisplayIndexSubject);
                this.columnDisplayIndexX1 = new DataColumn("DisplayIndexX1", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDisplayIndexX1);
                this.columnDisplayIndexX2 = new DataColumn("DisplayIndexX2", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDisplayIndexX2);
                this.columnDisplayIndexVerb = new DataColumn("DisplayIndexVerb", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDisplayIndexVerb);
                this.columnDisplayIndexPostS = new DataColumn("DisplayIndexPostS", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDisplayIndexPostS);
                this.columnDiscourseChartData_Id = new DataColumn("DiscourseChartData_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDiscourseChartData_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnDiscourseChartData_Id}, true));
                this.columnDisplayIndexRef.Namespace = "";
                this.columnDisplayIndexRef.DefaultValue = 0;
                this.columnDisplayIndexPreS.Namespace = "";
                this.columnDisplayIndexPreS.DefaultValue = 1;
                this.columnDisplayIndexSubject.Namespace = "";
                this.columnDisplayIndexSubject.DefaultValue = 2;
                this.columnDisplayIndexX1.Namespace = "";
                this.columnDisplayIndexX1.DefaultValue = 3;
                this.columnDisplayIndexX2.Namespace = "";
                this.columnDisplayIndexX2.DefaultValue = 4;
                this.columnDisplayIndexVerb.Namespace = "";
                this.columnDisplayIndexVerb.DefaultValue = 5;
                this.columnDisplayIndexPostS.Namespace = "";
                this.columnDisplayIndexPostS.DefaultValue = 6;
                this.columnDiscourseChartData_Id.AutoIncrement = true;
                this.columnDiscourseChartData_Id.AllowDBNull = false;
                this.columnDiscourseChartData_Id.Unique = true;
            }
            
            public DiscourseChartDataRow NewDiscourseChartDataRow() {
                return ((DiscourseChartDataRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DiscourseChartDataRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DiscourseChartDataRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DiscourseChartDataRowChanged != null)) {
                    this.DiscourseChartDataRowChanged(this, new DiscourseChartDataRowChangeEvent(((DiscourseChartDataRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DiscourseChartDataRowChanging != null)) {
                    this.DiscourseChartDataRowChanging(this, new DiscourseChartDataRowChangeEvent(((DiscourseChartDataRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DiscourseChartDataRowDeleted != null)) {
                    this.DiscourseChartDataRowDeleted(this, new DiscourseChartDataRowChangeEvent(((DiscourseChartDataRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DiscourseChartDataRowDeleting != null)) {
                    this.DiscourseChartDataRowDeleting(this, new DiscourseChartDataRowChangeEvent(((DiscourseChartDataRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDiscourseChartDataRow(DiscourseChartDataRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DiscourseChartDataRow : DataRow {
            
            private DiscourseChartDataDataTable tableDiscourseChartData;
            
            internal DiscourseChartDataRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDiscourseChartData = ((DiscourseChartDataDataTable)(this.Table));
            }
            
            public int DisplayIndexRef {
                get {
                    if (this.IsDisplayIndexRefNull()) {
                        return 0;
                    }
                    else {
                        return ((int)(this[this.tableDiscourseChartData.DisplayIndexRefColumn]));
                    }
                }
                set {
                    this[this.tableDiscourseChartData.DisplayIndexRefColumn] = value;
                }
            }
            
            public int DisplayIndexPreS {
                get {
                    if (this.IsDisplayIndexPreSNull()) {
                        return 1;
                    }
                    else {
                        return ((int)(this[this.tableDiscourseChartData.DisplayIndexPreSColumn]));
                    }
                }
                set {
                    this[this.tableDiscourseChartData.DisplayIndexPreSColumn] = value;
                }
            }
            
            public int DisplayIndexSubject {
                get {
                    if (this.IsDisplayIndexSubjectNull()) {
                        return 2;
                    }
                    else {
                        return ((int)(this[this.tableDiscourseChartData.DisplayIndexSubjectColumn]));
                    }
                }
                set {
                    this[this.tableDiscourseChartData.DisplayIndexSubjectColumn] = value;
                }
            }
            
            public int DisplayIndexX1 {
                get {
                    if (this.IsDisplayIndexX1Null()) {
                        return 3;
                    }
                    else {
                        return ((int)(this[this.tableDiscourseChartData.DisplayIndexX1Column]));
                    }
                }
                set {
                    this[this.tableDiscourseChartData.DisplayIndexX1Column] = value;
                }
            }
            
            public int DisplayIndexX2 {
                get {
                    if (this.IsDisplayIndexX2Null()) {
                        return 4;
                    }
                    else {
                        return ((int)(this[this.tableDiscourseChartData.DisplayIndexX2Column]));
                    }
                }
                set {
                    this[this.tableDiscourseChartData.DisplayIndexX2Column] = value;
                }
            }
            
            public int DisplayIndexVerb {
                get {
                    if (this.IsDisplayIndexVerbNull()) {
                        return 5;
                    }
                    else {
                        return ((int)(this[this.tableDiscourseChartData.DisplayIndexVerbColumn]));
                    }
                }
                set {
                    this[this.tableDiscourseChartData.DisplayIndexVerbColumn] = value;
                }
            }
            
            public int DisplayIndexPostS {
                get {
                    if (this.IsDisplayIndexPostSNull()) {
                        return 6;
                    }
                    else {
                        return ((int)(this[this.tableDiscourseChartData.DisplayIndexPostSColumn]));
                    }
                }
                set {
                    this[this.tableDiscourseChartData.DisplayIndexPostSColumn] = value;
                }
            }
            
            public bool IsDisplayIndexRefNull() {
                return this.IsNull(this.tableDiscourseChartData.DisplayIndexRefColumn);
            }
            
            public void SetDisplayIndexRefNull() {
                this[this.tableDiscourseChartData.DisplayIndexRefColumn] = System.Convert.DBNull;
            }
            
            public bool IsDisplayIndexPreSNull() {
                return this.IsNull(this.tableDiscourseChartData.DisplayIndexPreSColumn);
            }
            
            public void SetDisplayIndexPreSNull() {
                this[this.tableDiscourseChartData.DisplayIndexPreSColumn] = System.Convert.DBNull;
            }
            
            public bool IsDisplayIndexSubjectNull() {
                return this.IsNull(this.tableDiscourseChartData.DisplayIndexSubjectColumn);
            }
            
            public void SetDisplayIndexSubjectNull() {
                this[this.tableDiscourseChartData.DisplayIndexSubjectColumn] = System.Convert.DBNull;
            }
            
            public bool IsDisplayIndexX1Null() {
                return this.IsNull(this.tableDiscourseChartData.DisplayIndexX1Column);
            }
            
            public void SetDisplayIndexX1Null() {
                this[this.tableDiscourseChartData.DisplayIndexX1Column] = System.Convert.DBNull;
            }
            
            public bool IsDisplayIndexX2Null() {
                return this.IsNull(this.tableDiscourseChartData.DisplayIndexX2Column);
            }
            
            public void SetDisplayIndexX2Null() {
                this[this.tableDiscourseChartData.DisplayIndexX2Column] = System.Convert.DBNull;
            }
            
            public bool IsDisplayIndexVerbNull() {
                return this.IsNull(this.tableDiscourseChartData.DisplayIndexVerbColumn);
            }
            
            public void SetDisplayIndexVerbNull() {
                this[this.tableDiscourseChartData.DisplayIndexVerbColumn] = System.Convert.DBNull;
            }
            
            public bool IsDisplayIndexPostSNull() {
                return this.IsNull(this.tableDiscourseChartData.DisplayIndexPostSColumn);
            }
            
            public void SetDisplayIndexPostSNull() {
                this[this.tableDiscourseChartData.DisplayIndexPostSColumn] = System.Convert.DBNull;
            }
            
            public FontsRow[] GetFontsRows() {
                return ((FontsRow[])(this.GetChildRows(this.Table.ChildRelations["DiscourseChartData_Fonts"])));
            }
            
            public DiscourseClauseRow[] GetDiscourseClauseRows() {
                return ((DiscourseClauseRow[])(this.GetChildRows(this.Table.ChildRelations["DiscourseChartData_DiscourseClause"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DiscourseChartDataRowChangeEvent : EventArgs {
            
            private DiscourseChartDataRow eventRow;
            
            private DataRowAction eventAction;
            
            public DiscourseChartDataRowChangeEvent(DiscourseChartDataRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DiscourseChartDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FontsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFonts_Id;
            
            private DataColumn columnDiscourseChartData_Id;
            
            internal FontsDataTable() : 
                    base("Fonts") {
                this.InitClass();
            }
            
            internal FontsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Fonts_IdColumn {
                get {
                    return this.columnFonts_Id;
                }
            }
            
            internal DataColumn DiscourseChartData_IdColumn {
                get {
                    return this.columnDiscourseChartData_Id;
                }
            }
            
            public FontsRow this[int index] {
                get {
                    return ((FontsRow)(this.Rows[index]));
                }
            }
            
            public event FontsRowChangeEventHandler FontsRowChanged;
            
            public event FontsRowChangeEventHandler FontsRowChanging;
            
            public event FontsRowChangeEventHandler FontsRowDeleted;
            
            public event FontsRowChangeEventHandler FontsRowDeleting;
            
            public void AddFontsRow(FontsRow row) {
                this.Rows.Add(row);
            }
            
            public FontsRow AddFontsRow(DiscourseChartDataRow parentDiscourseChartDataRowByDiscourseChartData_Fonts) {
                FontsRow rowFontsRow = ((FontsRow)(this.NewRow()));
                rowFontsRow.ItemArray = new object[] {
                        null,
                        parentDiscourseChartDataRowByDiscourseChartData_Fonts[7]};
                this.Rows.Add(rowFontsRow);
                return rowFontsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FontsDataTable cln = ((FontsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FontsDataTable();
            }
            
            internal void InitVars() {
                this.columnFonts_Id = this.Columns["Fonts_Id"];
                this.columnDiscourseChartData_Id = this.Columns["DiscourseChartData_Id"];
            }
            
            private void InitClass() {
                this.columnFonts_Id = new DataColumn("Fonts_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnFonts_Id);
                this.columnDiscourseChartData_Id = new DataColumn("DiscourseChartData_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDiscourseChartData_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnFonts_Id}, true));
                this.columnFonts_Id.AutoIncrement = true;
                this.columnFonts_Id.AllowDBNull = false;
                this.columnFonts_Id.Unique = true;
            }
            
            public FontsRow NewFontsRow() {
                return ((FontsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FontsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FontsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FontsRowChanged != null)) {
                    this.FontsRowChanged(this, new FontsRowChangeEvent(((FontsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FontsRowChanging != null)) {
                    this.FontsRowChanging(this, new FontsRowChangeEvent(((FontsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FontsRowDeleted != null)) {
                    this.FontsRowDeleted(this, new FontsRowChangeEvent(((FontsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FontsRowDeleting != null)) {
                    this.FontsRowDeleting(this, new FontsRowChangeEvent(((FontsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFontsRow(FontsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FontsRow : DataRow {
            
            private FontsDataTable tableFonts;
            
            internal FontsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFonts = ((FontsDataTable)(this.Table));
            }
            
            public DiscourseChartDataRow DiscourseChartDataRow {
                get {
                    return ((DiscourseChartDataRow)(this.GetParentRow(this.Table.ParentRelations["DiscourseChartData_Fonts"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DiscourseChartData_Fonts"]);
                }
            }
            
            public VernacularFontRow[] GetVernacularFontRows() {
                return ((VernacularFontRow[])(this.GetChildRows(this.Table.ChildRelations["Fonts_VernacularFont"])));
            }
            
            public TransliterationFontRow[] GetTransliterationFontRows() {
                return ((TransliterationFontRow[])(this.GetChildRows(this.Table.ChildRelations["Fonts_TransliterationFont"])));
            }
            
            public GlossFontRow[] GetGlossFontRows() {
                return ((GlossFontRow[])(this.GetChildRows(this.Table.ChildRelations["Fonts_GlossFont"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FontsRowChangeEvent : EventArgs {
            
            private FontsRow eventRow;
            
            private DataRowAction eventAction;
            
            public FontsRowChangeEvent(FontsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FontsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VernacularFontDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFontName;
            
            private DataColumn columnFontSize;
            
            private DataColumn columnFontColor;
            
            private DataColumn columnFonts_Id;
            
            internal VernacularFontDataTable() : 
                    base("VernacularFont") {
                this.InitClass();
            }
            
            internal VernacularFontDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FontNameColumn {
                get {
                    return this.columnFontName;
                }
            }
            
            internal DataColumn FontSizeColumn {
                get {
                    return this.columnFontSize;
                }
            }
            
            internal DataColumn FontColorColumn {
                get {
                    return this.columnFontColor;
                }
            }
            
            internal DataColumn Fonts_IdColumn {
                get {
                    return this.columnFonts_Id;
                }
            }
            
            public VernacularFontRow this[int index] {
                get {
                    return ((VernacularFontRow)(this.Rows[index]));
                }
            }
            
            public event VernacularFontRowChangeEventHandler VernacularFontRowChanged;
            
            public event VernacularFontRowChangeEventHandler VernacularFontRowChanging;
            
            public event VernacularFontRowChangeEventHandler VernacularFontRowDeleted;
            
            public event VernacularFontRowChangeEventHandler VernacularFontRowDeleting;
            
            public void AddVernacularFontRow(VernacularFontRow row) {
                this.Rows.Add(row);
            }
            
            public VernacularFontRow AddVernacularFontRow(string FontName, System.Single FontSize, string FontColor, FontsRow parentFontsRowByFonts_VernacularFont) {
                VernacularFontRow rowVernacularFontRow = ((VernacularFontRow)(this.NewRow()));
                rowVernacularFontRow.ItemArray = new object[] {
                        FontName,
                        FontSize,
                        FontColor,
                        parentFontsRowByFonts_VernacularFont[0]};
                this.Rows.Add(rowVernacularFontRow);
                return rowVernacularFontRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                VernacularFontDataTable cln = ((VernacularFontDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new VernacularFontDataTable();
            }
            
            internal void InitVars() {
                this.columnFontName = this.Columns["FontName"];
                this.columnFontSize = this.Columns["FontSize"];
                this.columnFontColor = this.Columns["FontColor"];
                this.columnFonts_Id = this.Columns["Fonts_Id"];
            }
            
            private void InitClass() {
                this.columnFontName = new DataColumn("FontName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFontName);
                this.columnFontSize = new DataColumn("FontSize", typeof(System.Single), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFontSize);
                this.columnFontColor = new DataColumn("FontColor", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFontColor);
                this.columnFonts_Id = new DataColumn("Fonts_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnFonts_Id);
                this.columnFontName.Namespace = "";
                this.columnFontSize.Namespace = "";
                this.columnFontColor.Namespace = "";
            }
            
            public VernacularFontRow NewVernacularFontRow() {
                return ((VernacularFontRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new VernacularFontRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(VernacularFontRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VernacularFontRowChanged != null)) {
                    this.VernacularFontRowChanged(this, new VernacularFontRowChangeEvent(((VernacularFontRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VernacularFontRowChanging != null)) {
                    this.VernacularFontRowChanging(this, new VernacularFontRowChangeEvent(((VernacularFontRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VernacularFontRowDeleted != null)) {
                    this.VernacularFontRowDeleted(this, new VernacularFontRowChangeEvent(((VernacularFontRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VernacularFontRowDeleting != null)) {
                    this.VernacularFontRowDeleting(this, new VernacularFontRowChangeEvent(((VernacularFontRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVernacularFontRow(VernacularFontRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VernacularFontRow : DataRow {
            
            private VernacularFontDataTable tableVernacularFont;
            
            internal VernacularFontRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVernacularFont = ((VernacularFontDataTable)(this.Table));
            }
            
            public string FontName {
                get {
                    try {
                        return ((string)(this[this.tableVernacularFont.FontNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVernacularFont.FontNameColumn] = value;
                }
            }
            
            public System.Single FontSize {
                get {
                    try {
                        return ((System.Single)(this[this.tableVernacularFont.FontSizeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVernacularFont.FontSizeColumn] = value;
                }
            }
            
            public string FontColor {
                get {
                    try {
                        return ((string)(this[this.tableVernacularFont.FontColorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVernacularFont.FontColorColumn] = value;
                }
            }
            
            public FontsRow FontsRow {
                get {
                    return ((FontsRow)(this.GetParentRow(this.Table.ParentRelations["Fonts_VernacularFont"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Fonts_VernacularFont"]);
                }
            }
            
            public bool IsFontNameNull() {
                return this.IsNull(this.tableVernacularFont.FontNameColumn);
            }
            
            public void SetFontNameNull() {
                this[this.tableVernacularFont.FontNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsFontSizeNull() {
                return this.IsNull(this.tableVernacularFont.FontSizeColumn);
            }
            
            public void SetFontSizeNull() {
                this[this.tableVernacularFont.FontSizeColumn] = System.Convert.DBNull;
            }
            
            public bool IsFontColorNull() {
                return this.IsNull(this.tableVernacularFont.FontColorColumn);
            }
            
            public void SetFontColorNull() {
                this[this.tableVernacularFont.FontColorColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VernacularFontRowChangeEvent : EventArgs {
            
            private VernacularFontRow eventRow;
            
            private DataRowAction eventAction;
            
            public VernacularFontRowChangeEvent(VernacularFontRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public VernacularFontRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransliterationFontDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFontName;
            
            private DataColumn columnFontSize;
            
            private DataColumn columnFontColor;
            
            private DataColumn columnFonts_Id;
            
            internal TransliterationFontDataTable() : 
                    base("TransliterationFont") {
                this.InitClass();
            }
            
            internal TransliterationFontDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FontNameColumn {
                get {
                    return this.columnFontName;
                }
            }
            
            internal DataColumn FontSizeColumn {
                get {
                    return this.columnFontSize;
                }
            }
            
            internal DataColumn FontColorColumn {
                get {
                    return this.columnFontColor;
                }
            }
            
            internal DataColumn Fonts_IdColumn {
                get {
                    return this.columnFonts_Id;
                }
            }
            
            public TransliterationFontRow this[int index] {
                get {
                    return ((TransliterationFontRow)(this.Rows[index]));
                }
            }
            
            public event TransliterationFontRowChangeEventHandler TransliterationFontRowChanged;
            
            public event TransliterationFontRowChangeEventHandler TransliterationFontRowChanging;
            
            public event TransliterationFontRowChangeEventHandler TransliterationFontRowDeleted;
            
            public event TransliterationFontRowChangeEventHandler TransliterationFontRowDeleting;
            
            public void AddTransliterationFontRow(TransliterationFontRow row) {
                this.Rows.Add(row);
            }
            
            public TransliterationFontRow AddTransliterationFontRow(string FontName, System.Single FontSize, string FontColor, FontsRow parentFontsRowByFonts_TransliterationFont) {
                TransliterationFontRow rowTransliterationFontRow = ((TransliterationFontRow)(this.NewRow()));
                rowTransliterationFontRow.ItemArray = new object[] {
                        FontName,
                        FontSize,
                        FontColor,
                        parentFontsRowByFonts_TransliterationFont[0]};
                this.Rows.Add(rowTransliterationFontRow);
                return rowTransliterationFontRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TransliterationFontDataTable cln = ((TransliterationFontDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TransliterationFontDataTable();
            }
            
            internal void InitVars() {
                this.columnFontName = this.Columns["FontName"];
                this.columnFontSize = this.Columns["FontSize"];
                this.columnFontColor = this.Columns["FontColor"];
                this.columnFonts_Id = this.Columns["Fonts_Id"];
            }
            
            private void InitClass() {
                this.columnFontName = new DataColumn("FontName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFontName);
                this.columnFontSize = new DataColumn("FontSize", typeof(System.Single), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFontSize);
                this.columnFontColor = new DataColumn("FontColor", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFontColor);
                this.columnFonts_Id = new DataColumn("Fonts_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnFonts_Id);
                this.columnFontName.Namespace = "";
                this.columnFontSize.Namespace = "";
                this.columnFontColor.Namespace = "";
            }
            
            public TransliterationFontRow NewTransliterationFontRow() {
                return ((TransliterationFontRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TransliterationFontRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TransliterationFontRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TransliterationFontRowChanged != null)) {
                    this.TransliterationFontRowChanged(this, new TransliterationFontRowChangeEvent(((TransliterationFontRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TransliterationFontRowChanging != null)) {
                    this.TransliterationFontRowChanging(this, new TransliterationFontRowChangeEvent(((TransliterationFontRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TransliterationFontRowDeleted != null)) {
                    this.TransliterationFontRowDeleted(this, new TransliterationFontRowChangeEvent(((TransliterationFontRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TransliterationFontRowDeleting != null)) {
                    this.TransliterationFontRowDeleting(this, new TransliterationFontRowChangeEvent(((TransliterationFontRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTransliterationFontRow(TransliterationFontRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransliterationFontRow : DataRow {
            
            private TransliterationFontDataTable tableTransliterationFont;
            
            internal TransliterationFontRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTransliterationFont = ((TransliterationFontDataTable)(this.Table));
            }
            
            public string FontName {
                get {
                    try {
                        return ((string)(this[this.tableTransliterationFont.FontNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransliterationFont.FontNameColumn] = value;
                }
            }
            
            public System.Single FontSize {
                get {
                    try {
                        return ((System.Single)(this[this.tableTransliterationFont.FontSizeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransliterationFont.FontSizeColumn] = value;
                }
            }
            
            public string FontColor {
                get {
                    try {
                        return ((string)(this[this.tableTransliterationFont.FontColorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransliterationFont.FontColorColumn] = value;
                }
            }
            
            public FontsRow FontsRow {
                get {
                    return ((FontsRow)(this.GetParentRow(this.Table.ParentRelations["Fonts_TransliterationFont"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Fonts_TransliterationFont"]);
                }
            }
            
            public bool IsFontNameNull() {
                return this.IsNull(this.tableTransliterationFont.FontNameColumn);
            }
            
            public void SetFontNameNull() {
                this[this.tableTransliterationFont.FontNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsFontSizeNull() {
                return this.IsNull(this.tableTransliterationFont.FontSizeColumn);
            }
            
            public void SetFontSizeNull() {
                this[this.tableTransliterationFont.FontSizeColumn] = System.Convert.DBNull;
            }
            
            public bool IsFontColorNull() {
                return this.IsNull(this.tableTransliterationFont.FontColorColumn);
            }
            
            public void SetFontColorNull() {
                this[this.tableTransliterationFont.FontColorColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransliterationFontRowChangeEvent : EventArgs {
            
            private TransliterationFontRow eventRow;
            
            private DataRowAction eventAction;
            
            public TransliterationFontRowChangeEvent(TransliterationFontRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TransliterationFontRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GlossFontDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFontName;
            
            private DataColumn columnFontSize;
            
            private DataColumn columnFontColor;
            
            private DataColumn columnFonts_Id;
            
            internal GlossFontDataTable() : 
                    base("GlossFont") {
                this.InitClass();
            }
            
            internal GlossFontDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FontNameColumn {
                get {
                    return this.columnFontName;
                }
            }
            
            internal DataColumn FontSizeColumn {
                get {
                    return this.columnFontSize;
                }
            }
            
            internal DataColumn FontColorColumn {
                get {
                    return this.columnFontColor;
                }
            }
            
            internal DataColumn Fonts_IdColumn {
                get {
                    return this.columnFonts_Id;
                }
            }
            
            public GlossFontRow this[int index] {
                get {
                    return ((GlossFontRow)(this.Rows[index]));
                }
            }
            
            public event GlossFontRowChangeEventHandler GlossFontRowChanged;
            
            public event GlossFontRowChangeEventHandler GlossFontRowChanging;
            
            public event GlossFontRowChangeEventHandler GlossFontRowDeleted;
            
            public event GlossFontRowChangeEventHandler GlossFontRowDeleting;
            
            public void AddGlossFontRow(GlossFontRow row) {
                this.Rows.Add(row);
            }
            
            public GlossFontRow AddGlossFontRow(string FontName, System.Single FontSize, string FontColor, FontsRow parentFontsRowByFonts_GlossFont) {
                GlossFontRow rowGlossFontRow = ((GlossFontRow)(this.NewRow()));
                rowGlossFontRow.ItemArray = new object[] {
                        FontName,
                        FontSize,
                        FontColor,
                        parentFontsRowByFonts_GlossFont[0]};
                this.Rows.Add(rowGlossFontRow);
                return rowGlossFontRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GlossFontDataTable cln = ((GlossFontDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GlossFontDataTable();
            }
            
            internal void InitVars() {
                this.columnFontName = this.Columns["FontName"];
                this.columnFontSize = this.Columns["FontSize"];
                this.columnFontColor = this.Columns["FontColor"];
                this.columnFonts_Id = this.Columns["Fonts_Id"];
            }
            
            private void InitClass() {
                this.columnFontName = new DataColumn("FontName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFontName);
                this.columnFontSize = new DataColumn("FontSize", typeof(System.Single), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFontSize);
                this.columnFontColor = new DataColumn("FontColor", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFontColor);
                this.columnFonts_Id = new DataColumn("Fonts_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnFonts_Id);
                this.columnFontName.Namespace = "";
                this.columnFontSize.Namespace = "";
                this.columnFontColor.Namespace = "";
            }
            
            public GlossFontRow NewGlossFontRow() {
                return ((GlossFontRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GlossFontRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GlossFontRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GlossFontRowChanged != null)) {
                    this.GlossFontRowChanged(this, new GlossFontRowChangeEvent(((GlossFontRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GlossFontRowChanging != null)) {
                    this.GlossFontRowChanging(this, new GlossFontRowChangeEvent(((GlossFontRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GlossFontRowDeleted != null)) {
                    this.GlossFontRowDeleted(this, new GlossFontRowChangeEvent(((GlossFontRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GlossFontRowDeleting != null)) {
                    this.GlossFontRowDeleting(this, new GlossFontRowChangeEvent(((GlossFontRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGlossFontRow(GlossFontRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GlossFontRow : DataRow {
            
            private GlossFontDataTable tableGlossFont;
            
            internal GlossFontRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGlossFont = ((GlossFontDataTable)(this.Table));
            }
            
            public string FontName {
                get {
                    try {
                        return ((string)(this[this.tableGlossFont.FontNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGlossFont.FontNameColumn] = value;
                }
            }
            
            public System.Single FontSize {
                get {
                    try {
                        return ((System.Single)(this[this.tableGlossFont.FontSizeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGlossFont.FontSizeColumn] = value;
                }
            }
            
            public string FontColor {
                get {
                    try {
                        return ((string)(this[this.tableGlossFont.FontColorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGlossFont.FontColorColumn] = value;
                }
            }
            
            public FontsRow FontsRow {
                get {
                    return ((FontsRow)(this.GetParentRow(this.Table.ParentRelations["Fonts_GlossFont"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Fonts_GlossFont"]);
                }
            }
            
            public bool IsFontNameNull() {
                return this.IsNull(this.tableGlossFont.FontNameColumn);
            }
            
            public void SetFontNameNull() {
                this[this.tableGlossFont.FontNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsFontSizeNull() {
                return this.IsNull(this.tableGlossFont.FontSizeColumn);
            }
            
            public void SetFontSizeNull() {
                this[this.tableGlossFont.FontSizeColumn] = System.Convert.DBNull;
            }
            
            public bool IsFontColorNull() {
                return this.IsNull(this.tableGlossFont.FontColorColumn);
            }
            
            public void SetFontColorNull() {
                this[this.tableGlossFont.FontColorColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GlossFontRowChangeEvent : EventArgs {
            
            private GlossFontRow eventRow;
            
            private DataRowAction eventAction;
            
            public GlossFontRowChangeEvent(GlossFontRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GlossFontRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DiscourseClauseDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnRef;
            
            private DataColumn columnFreeTranslation;
            
            private DataColumn columnDiscourseClause_Id;
            
            private DataColumn columnDiscourseChartData_Id;
            
            internal DiscourseClauseDataTable() : 
                    base("DiscourseClause") {
                this.InitClass();
            }
            
            internal DiscourseClauseDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn RefColumn {
                get {
                    return this.columnRef;
                }
            }
            
            internal DataColumn FreeTranslationColumn {
                get {
                    return this.columnFreeTranslation;
                }
            }
            
            internal DataColumn DiscourseClause_IdColumn {
                get {
                    return this.columnDiscourseClause_Id;
                }
            }
            
            internal DataColumn DiscourseChartData_IdColumn {
                get {
                    return this.columnDiscourseChartData_Id;
                }
            }
            
            public DiscourseClauseRow this[int index] {
                get {
                    return ((DiscourseClauseRow)(this.Rows[index]));
                }
            }
            
            public event DiscourseClauseRowChangeEventHandler DiscourseClauseRowChanged;
            
            public event DiscourseClauseRowChangeEventHandler DiscourseClauseRowChanging;
            
            public event DiscourseClauseRowChangeEventHandler DiscourseClauseRowDeleted;
            
            public event DiscourseClauseRowChangeEventHandler DiscourseClauseRowDeleting;
            
            public void AddDiscourseClauseRow(DiscourseClauseRow row) {
                this.Rows.Add(row);
            }
            
            public DiscourseClauseRow AddDiscourseClauseRow(string Ref, string FreeTranslation, DiscourseChartDataRow parentDiscourseChartDataRowByDiscourseChartData_DiscourseClause) {
                DiscourseClauseRow rowDiscourseClauseRow = ((DiscourseClauseRow)(this.NewRow()));
                rowDiscourseClauseRow.ItemArray = new object[] {
                        Ref,
                        FreeTranslation,
                        null,
                        parentDiscourseChartDataRowByDiscourseChartData_DiscourseClause[7]};
                this.Rows.Add(rowDiscourseClauseRow);
                return rowDiscourseClauseRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DiscourseClauseDataTable cln = ((DiscourseClauseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DiscourseClauseDataTable();
            }
            
            internal void InitVars() {
                this.columnRef = this.Columns["Ref"];
                this.columnFreeTranslation = this.Columns["FreeTranslation"];
                this.columnDiscourseClause_Id = this.Columns["DiscourseClause_Id"];
                this.columnDiscourseChartData_Id = this.Columns["DiscourseChartData_Id"];
            }
            
            private void InitClass() {
                this.columnRef = new DataColumn("Ref", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRef);
                this.columnFreeTranslation = new DataColumn("FreeTranslation", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFreeTranslation);
                this.columnDiscourseClause_Id = new DataColumn("DiscourseClause_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDiscourseClause_Id);
                this.columnDiscourseChartData_Id = new DataColumn("DiscourseChartData_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDiscourseChartData_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnDiscourseClause_Id}, true));
                this.columnRef.Namespace = "";
                this.columnDiscourseClause_Id.AutoIncrement = true;
                this.columnDiscourseClause_Id.AllowDBNull = false;
                this.columnDiscourseClause_Id.Unique = true;
            }
            
            public DiscourseClauseRow NewDiscourseClauseRow() {
                return ((DiscourseClauseRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DiscourseClauseRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DiscourseClauseRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DiscourseClauseRowChanged != null)) {
                    this.DiscourseClauseRowChanged(this, new DiscourseClauseRowChangeEvent(((DiscourseClauseRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DiscourseClauseRowChanging != null)) {
                    this.DiscourseClauseRowChanging(this, new DiscourseClauseRowChangeEvent(((DiscourseClauseRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DiscourseClauseRowDeleted != null)) {
                    this.DiscourseClauseRowDeleted(this, new DiscourseClauseRowChangeEvent(((DiscourseClauseRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DiscourseClauseRowDeleting != null)) {
                    this.DiscourseClauseRowDeleting(this, new DiscourseClauseRowChangeEvent(((DiscourseClauseRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDiscourseClauseRow(DiscourseClauseRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DiscourseClauseRow : DataRow {
            
            private DiscourseClauseDataTable tableDiscourseClause;
            
            internal DiscourseClauseRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDiscourseClause = ((DiscourseClauseDataTable)(this.Table));
            }
            
            public string Ref {
                get {
                    try {
                        return ((string)(this[this.tableDiscourseClause.RefColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiscourseClause.RefColumn] = value;
                }
            }
            
            public string FreeTranslation {
                get {
                    try {
                        return ((string)(this[this.tableDiscourseClause.FreeTranslationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiscourseClause.FreeTranslationColumn] = value;
                }
            }
            
            public DiscourseChartDataRow DiscourseChartDataRow {
                get {
                    return ((DiscourseChartDataRow)(this.GetParentRow(this.Table.ParentRelations["DiscourseChartData_DiscourseClause"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DiscourseChartData_DiscourseClause"]);
                }
            }
            
            public bool IsRefNull() {
                return this.IsNull(this.tableDiscourseClause.RefColumn);
            }
            
            public void SetRefNull() {
                this[this.tableDiscourseClause.RefColumn] = System.Convert.DBNull;
            }
            
            public bool IsFreeTranslationNull() {
                return this.IsNull(this.tableDiscourseClause.FreeTranslationColumn);
            }
            
            public void SetFreeTranslationNull() {
                this[this.tableDiscourseClause.FreeTranslationColumn] = System.Convert.DBNull;
            }
            
            public VernacularRow[] GetVernacularRows() {
                return ((VernacularRow[])(this.GetChildRows(this.Table.ChildRelations["DiscourseClause_Vernacular"])));
            }
            
            public TransliterationRow[] GetTransliterationRows() {
                return ((TransliterationRow[])(this.GetChildRows(this.Table.ChildRelations["DiscourseClause_Transliteration"])));
            }
            
            public GlossRow[] GetGlossRows() {
                return ((GlossRow[])(this.GetChildRows(this.Table.ChildRelations["DiscourseClause_Gloss"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DiscourseClauseRowChangeEvent : EventArgs {
            
            private DiscourseClauseRow eventRow;
            
            private DataRowAction eventAction;
            
            public DiscourseClauseRowChangeEvent(DiscourseClauseRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DiscourseClauseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VernacularDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPreS;
            
            private DataColumn columnSubject;
            
            private DataColumn columnX1;
            
            private DataColumn columnX2;
            
            private DataColumn columnVerb;
            
            private DataColumn columnPostS;
            
            private DataColumn columnDiscourseClause_Id;
            
            internal VernacularDataTable() : 
                    base("Vernacular") {
                this.InitClass();
            }
            
            internal VernacularDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PreSColumn {
                get {
                    return this.columnPreS;
                }
            }
            
            internal DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            internal DataColumn X1Column {
                get {
                    return this.columnX1;
                }
            }
            
            internal DataColumn X2Column {
                get {
                    return this.columnX2;
                }
            }
            
            internal DataColumn VerbColumn {
                get {
                    return this.columnVerb;
                }
            }
            
            internal DataColumn PostSColumn {
                get {
                    return this.columnPostS;
                }
            }
            
            internal DataColumn DiscourseClause_IdColumn {
                get {
                    return this.columnDiscourseClause_Id;
                }
            }
            
            public VernacularRow this[int index] {
                get {
                    return ((VernacularRow)(this.Rows[index]));
                }
            }
            
            public event VernacularRowChangeEventHandler VernacularRowChanged;
            
            public event VernacularRowChangeEventHandler VernacularRowChanging;
            
            public event VernacularRowChangeEventHandler VernacularRowDeleted;
            
            public event VernacularRowChangeEventHandler VernacularRowDeleting;
            
            public void AddVernacularRow(VernacularRow row) {
                this.Rows.Add(row);
            }
            
            public VernacularRow AddVernacularRow(string PreS, string Subject, string X1, string X2, string Verb, string PostS, DiscourseClauseRow parentDiscourseClauseRowByDiscourseClause_Vernacular) {
                VernacularRow rowVernacularRow = ((VernacularRow)(this.NewRow()));
                rowVernacularRow.ItemArray = new object[] {
                        PreS,
                        Subject,
                        X1,
                        X2,
                        Verb,
                        PostS,
                        parentDiscourseClauseRowByDiscourseClause_Vernacular[2]};
                this.Rows.Add(rowVernacularRow);
                return rowVernacularRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                VernacularDataTable cln = ((VernacularDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new VernacularDataTable();
            }
            
            internal void InitVars() {
                this.columnPreS = this.Columns["PreS"];
                this.columnSubject = this.Columns["Subject"];
                this.columnX1 = this.Columns["X1"];
                this.columnX2 = this.Columns["X2"];
                this.columnVerb = this.Columns["Verb"];
                this.columnPostS = this.Columns["PostS"];
                this.columnDiscourseClause_Id = this.Columns["DiscourseClause_Id"];
            }
            
            private void InitClass() {
                this.columnPreS = new DataColumn("PreS", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreS);
                this.columnSubject = new DataColumn("Subject", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSubject);
                this.columnX1 = new DataColumn("X1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnX1);
                this.columnX2 = new DataColumn("X2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnX2);
                this.columnVerb = new DataColumn("Verb", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVerb);
                this.columnPostS = new DataColumn("PostS", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostS);
                this.columnDiscourseClause_Id = new DataColumn("DiscourseClause_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDiscourseClause_Id);
            }
            
            public VernacularRow NewVernacularRow() {
                return ((VernacularRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new VernacularRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(VernacularRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VernacularRowChanged != null)) {
                    this.VernacularRowChanged(this, new VernacularRowChangeEvent(((VernacularRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VernacularRowChanging != null)) {
                    this.VernacularRowChanging(this, new VernacularRowChangeEvent(((VernacularRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VernacularRowDeleted != null)) {
                    this.VernacularRowDeleted(this, new VernacularRowChangeEvent(((VernacularRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VernacularRowDeleting != null)) {
                    this.VernacularRowDeleting(this, new VernacularRowChangeEvent(((VernacularRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVernacularRow(VernacularRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VernacularRow : DataRow {
            
            private VernacularDataTable tableVernacular;
            
            internal VernacularRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVernacular = ((VernacularDataTable)(this.Table));
            }
            
            public string PreS {
                get {
                    try {
                        return ((string)(this[this.tableVernacular.PreSColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVernacular.PreSColumn] = value;
                }
            }
            
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableVernacular.SubjectColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVernacular.SubjectColumn] = value;
                }
            }
            
            public string X1 {
                get {
                    try {
                        return ((string)(this[this.tableVernacular.X1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVernacular.X1Column] = value;
                }
            }
            
            public string X2 {
                get {
                    try {
                        return ((string)(this[this.tableVernacular.X2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVernacular.X2Column] = value;
                }
            }
            
            public string Verb {
                get {
                    try {
                        return ((string)(this[this.tableVernacular.VerbColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVernacular.VerbColumn] = value;
                }
            }
            
            public string PostS {
                get {
                    try {
                        return ((string)(this[this.tableVernacular.PostSColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVernacular.PostSColumn] = value;
                }
            }
            
            public DiscourseClauseRow DiscourseClauseRow {
                get {
                    return ((DiscourseClauseRow)(this.GetParentRow(this.Table.ParentRelations["DiscourseClause_Vernacular"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DiscourseClause_Vernacular"]);
                }
            }
            
            public bool IsPreSNull() {
                return this.IsNull(this.tableVernacular.PreSColumn);
            }
            
            public void SetPreSNull() {
                this[this.tableVernacular.PreSColumn] = System.Convert.DBNull;
            }
            
            public bool IsSubjectNull() {
                return this.IsNull(this.tableVernacular.SubjectColumn);
            }
            
            public void SetSubjectNull() {
                this[this.tableVernacular.SubjectColumn] = System.Convert.DBNull;
            }
            
            public bool IsX1Null() {
                return this.IsNull(this.tableVernacular.X1Column);
            }
            
            public void SetX1Null() {
                this[this.tableVernacular.X1Column] = System.Convert.DBNull;
            }
            
            public bool IsX2Null() {
                return this.IsNull(this.tableVernacular.X2Column);
            }
            
            public void SetX2Null() {
                this[this.tableVernacular.X2Column] = System.Convert.DBNull;
            }
            
            public bool IsVerbNull() {
                return this.IsNull(this.tableVernacular.VerbColumn);
            }
            
            public void SetVerbNull() {
                this[this.tableVernacular.VerbColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostSNull() {
                return this.IsNull(this.tableVernacular.PostSColumn);
            }
            
            public void SetPostSNull() {
                this[this.tableVernacular.PostSColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VernacularRowChangeEvent : EventArgs {
            
            private VernacularRow eventRow;
            
            private DataRowAction eventAction;
            
            public VernacularRowChangeEvent(VernacularRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public VernacularRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransliterationDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPreS;
            
            private DataColumn columnSubject;
            
            private DataColumn columnX1;
            
            private DataColumn columnX2;
            
            private DataColumn columnVerb;
            
            private DataColumn columnPostS;
            
            private DataColumn columnDiscourseClause_Id;
            
            internal TransliterationDataTable() : 
                    base("Transliteration") {
                this.InitClass();
            }
            
            internal TransliterationDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PreSColumn {
                get {
                    return this.columnPreS;
                }
            }
            
            internal DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            internal DataColumn X1Column {
                get {
                    return this.columnX1;
                }
            }
            
            internal DataColumn X2Column {
                get {
                    return this.columnX2;
                }
            }
            
            internal DataColumn VerbColumn {
                get {
                    return this.columnVerb;
                }
            }
            
            internal DataColumn PostSColumn {
                get {
                    return this.columnPostS;
                }
            }
            
            internal DataColumn DiscourseClause_IdColumn {
                get {
                    return this.columnDiscourseClause_Id;
                }
            }
            
            public TransliterationRow this[int index] {
                get {
                    return ((TransliterationRow)(this.Rows[index]));
                }
            }
            
            public event TransliterationRowChangeEventHandler TransliterationRowChanged;
            
            public event TransliterationRowChangeEventHandler TransliterationRowChanging;
            
            public event TransliterationRowChangeEventHandler TransliterationRowDeleted;
            
            public event TransliterationRowChangeEventHandler TransliterationRowDeleting;
            
            public void AddTransliterationRow(TransliterationRow row) {
                this.Rows.Add(row);
            }
            
            public TransliterationRow AddTransliterationRow(string PreS, string Subject, string X1, string X2, string Verb, string PostS, DiscourseClauseRow parentDiscourseClauseRowByDiscourseClause_Transliteration) {
                TransliterationRow rowTransliterationRow = ((TransliterationRow)(this.NewRow()));
                rowTransliterationRow.ItemArray = new object[] {
                        PreS,
                        Subject,
                        X1,
                        X2,
                        Verb,
                        PostS,
                        parentDiscourseClauseRowByDiscourseClause_Transliteration[2]};
                this.Rows.Add(rowTransliterationRow);
                return rowTransliterationRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TransliterationDataTable cln = ((TransliterationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TransliterationDataTable();
            }
            
            internal void InitVars() {
                this.columnPreS = this.Columns["PreS"];
                this.columnSubject = this.Columns["Subject"];
                this.columnX1 = this.Columns["X1"];
                this.columnX2 = this.Columns["X2"];
                this.columnVerb = this.Columns["Verb"];
                this.columnPostS = this.Columns["PostS"];
                this.columnDiscourseClause_Id = this.Columns["DiscourseClause_Id"];
            }
            
            private void InitClass() {
                this.columnPreS = new DataColumn("PreS", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreS);
                this.columnSubject = new DataColumn("Subject", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSubject);
                this.columnX1 = new DataColumn("X1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnX1);
                this.columnX2 = new DataColumn("X2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnX2);
                this.columnVerb = new DataColumn("Verb", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVerb);
                this.columnPostS = new DataColumn("PostS", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostS);
                this.columnDiscourseClause_Id = new DataColumn("DiscourseClause_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDiscourseClause_Id);
            }
            
            public TransliterationRow NewTransliterationRow() {
                return ((TransliterationRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TransliterationRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TransliterationRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TransliterationRowChanged != null)) {
                    this.TransliterationRowChanged(this, new TransliterationRowChangeEvent(((TransliterationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TransliterationRowChanging != null)) {
                    this.TransliterationRowChanging(this, new TransliterationRowChangeEvent(((TransliterationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TransliterationRowDeleted != null)) {
                    this.TransliterationRowDeleted(this, new TransliterationRowChangeEvent(((TransliterationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TransliterationRowDeleting != null)) {
                    this.TransliterationRowDeleting(this, new TransliterationRowChangeEvent(((TransliterationRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTransliterationRow(TransliterationRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransliterationRow : DataRow {
            
            private TransliterationDataTable tableTransliteration;
            
            internal TransliterationRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTransliteration = ((TransliterationDataTable)(this.Table));
            }
            
            public string PreS {
                get {
                    try {
                        return ((string)(this[this.tableTransliteration.PreSColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransliteration.PreSColumn] = value;
                }
            }
            
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableTransliteration.SubjectColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransliteration.SubjectColumn] = value;
                }
            }
            
            public string X1 {
                get {
                    try {
                        return ((string)(this[this.tableTransliteration.X1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransliteration.X1Column] = value;
                }
            }
            
            public string X2 {
                get {
                    try {
                        return ((string)(this[this.tableTransliteration.X2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransliteration.X2Column] = value;
                }
            }
            
            public string Verb {
                get {
                    try {
                        return ((string)(this[this.tableTransliteration.VerbColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransliteration.VerbColumn] = value;
                }
            }
            
            public string PostS {
                get {
                    try {
                        return ((string)(this[this.tableTransliteration.PostSColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransliteration.PostSColumn] = value;
                }
            }
            
            public DiscourseClauseRow DiscourseClauseRow {
                get {
                    return ((DiscourseClauseRow)(this.GetParentRow(this.Table.ParentRelations["DiscourseClause_Transliteration"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DiscourseClause_Transliteration"]);
                }
            }
            
            public bool IsPreSNull() {
                return this.IsNull(this.tableTransliteration.PreSColumn);
            }
            
            public void SetPreSNull() {
                this[this.tableTransliteration.PreSColumn] = System.Convert.DBNull;
            }
            
            public bool IsSubjectNull() {
                return this.IsNull(this.tableTransliteration.SubjectColumn);
            }
            
            public void SetSubjectNull() {
                this[this.tableTransliteration.SubjectColumn] = System.Convert.DBNull;
            }
            
            public bool IsX1Null() {
                return this.IsNull(this.tableTransliteration.X1Column);
            }
            
            public void SetX1Null() {
                this[this.tableTransliteration.X1Column] = System.Convert.DBNull;
            }
            
            public bool IsX2Null() {
                return this.IsNull(this.tableTransliteration.X2Column);
            }
            
            public void SetX2Null() {
                this[this.tableTransliteration.X2Column] = System.Convert.DBNull;
            }
            
            public bool IsVerbNull() {
                return this.IsNull(this.tableTransliteration.VerbColumn);
            }
            
            public void SetVerbNull() {
                this[this.tableTransliteration.VerbColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostSNull() {
                return this.IsNull(this.tableTransliteration.PostSColumn);
            }
            
            public void SetPostSNull() {
                this[this.tableTransliteration.PostSColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransliterationRowChangeEvent : EventArgs {
            
            private TransliterationRow eventRow;
            
            private DataRowAction eventAction;
            
            public TransliterationRowChangeEvent(TransliterationRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TransliterationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GlossDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPreS;
            
            private DataColumn columnSubject;
            
            private DataColumn columnX1;
            
            private DataColumn columnX2;
            
            private DataColumn columnVerb;
            
            private DataColumn columnPostS;
            
            private DataColumn columnDiscourseClause_Id;
            
            internal GlossDataTable() : 
                    base("Gloss") {
                this.InitClass();
            }
            
            internal GlossDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PreSColumn {
                get {
                    return this.columnPreS;
                }
            }
            
            internal DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            internal DataColumn X1Column {
                get {
                    return this.columnX1;
                }
            }
            
            internal DataColumn X2Column {
                get {
                    return this.columnX2;
                }
            }
            
            internal DataColumn VerbColumn {
                get {
                    return this.columnVerb;
                }
            }
            
            internal DataColumn PostSColumn {
                get {
                    return this.columnPostS;
                }
            }
            
            internal DataColumn DiscourseClause_IdColumn {
                get {
                    return this.columnDiscourseClause_Id;
                }
            }
            
            public GlossRow this[int index] {
                get {
                    return ((GlossRow)(this.Rows[index]));
                }
            }
            
            public event GlossRowChangeEventHandler GlossRowChanged;
            
            public event GlossRowChangeEventHandler GlossRowChanging;
            
            public event GlossRowChangeEventHandler GlossRowDeleted;
            
            public event GlossRowChangeEventHandler GlossRowDeleting;
            
            public void AddGlossRow(GlossRow row) {
                this.Rows.Add(row);
            }
            
            public GlossRow AddGlossRow(string PreS, string Subject, string X1, string X2, string Verb, string PostS, DiscourseClauseRow parentDiscourseClauseRowByDiscourseClause_Gloss) {
                GlossRow rowGlossRow = ((GlossRow)(this.NewRow()));
                rowGlossRow.ItemArray = new object[] {
                        PreS,
                        Subject,
                        X1,
                        X2,
                        Verb,
                        PostS,
                        parentDiscourseClauseRowByDiscourseClause_Gloss[2]};
                this.Rows.Add(rowGlossRow);
                return rowGlossRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GlossDataTable cln = ((GlossDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GlossDataTable();
            }
            
            internal void InitVars() {
                this.columnPreS = this.Columns["PreS"];
                this.columnSubject = this.Columns["Subject"];
                this.columnX1 = this.Columns["X1"];
                this.columnX2 = this.Columns["X2"];
                this.columnVerb = this.Columns["Verb"];
                this.columnPostS = this.Columns["PostS"];
                this.columnDiscourseClause_Id = this.Columns["DiscourseClause_Id"];
            }
            
            private void InitClass() {
                this.columnPreS = new DataColumn("PreS", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreS);
                this.columnSubject = new DataColumn("Subject", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSubject);
                this.columnX1 = new DataColumn("X1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnX1);
                this.columnX2 = new DataColumn("X2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnX2);
                this.columnVerb = new DataColumn("Verb", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVerb);
                this.columnPostS = new DataColumn("PostS", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostS);
                this.columnDiscourseClause_Id = new DataColumn("DiscourseClause_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDiscourseClause_Id);
            }
            
            public GlossRow NewGlossRow() {
                return ((GlossRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GlossRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GlossRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GlossRowChanged != null)) {
                    this.GlossRowChanged(this, new GlossRowChangeEvent(((GlossRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GlossRowChanging != null)) {
                    this.GlossRowChanging(this, new GlossRowChangeEvent(((GlossRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GlossRowDeleted != null)) {
                    this.GlossRowDeleted(this, new GlossRowChangeEvent(((GlossRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GlossRowDeleting != null)) {
                    this.GlossRowDeleting(this, new GlossRowChangeEvent(((GlossRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGlossRow(GlossRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GlossRow : DataRow {
            
            private GlossDataTable tableGloss;
            
            internal GlossRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGloss = ((GlossDataTable)(this.Table));
            }
            
            public string PreS {
                get {
                    try {
                        return ((string)(this[this.tableGloss.PreSColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGloss.PreSColumn] = value;
                }
            }
            
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableGloss.SubjectColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGloss.SubjectColumn] = value;
                }
            }
            
            public string X1 {
                get {
                    try {
                        return ((string)(this[this.tableGloss.X1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGloss.X1Column] = value;
                }
            }
            
            public string X2 {
                get {
                    try {
                        return ((string)(this[this.tableGloss.X2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGloss.X2Column] = value;
                }
            }
            
            public string Verb {
                get {
                    try {
                        return ((string)(this[this.tableGloss.VerbColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGloss.VerbColumn] = value;
                }
            }
            
            public string PostS {
                get {
                    try {
                        return ((string)(this[this.tableGloss.PostSColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGloss.PostSColumn] = value;
                }
            }
            
            public DiscourseClauseRow DiscourseClauseRow {
                get {
                    return ((DiscourseClauseRow)(this.GetParentRow(this.Table.ParentRelations["DiscourseClause_Gloss"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DiscourseClause_Gloss"]);
                }
            }
            
            public bool IsPreSNull() {
                return this.IsNull(this.tableGloss.PreSColumn);
            }
            
            public void SetPreSNull() {
                this[this.tableGloss.PreSColumn] = System.Convert.DBNull;
            }
            
            public bool IsSubjectNull() {
                return this.IsNull(this.tableGloss.SubjectColumn);
            }
            
            public void SetSubjectNull() {
                this[this.tableGloss.SubjectColumn] = System.Convert.DBNull;
            }
            
            public bool IsX1Null() {
                return this.IsNull(this.tableGloss.X1Column);
            }
            
            public void SetX1Null() {
                this[this.tableGloss.X1Column] = System.Convert.DBNull;
            }
            
            public bool IsX2Null() {
                return this.IsNull(this.tableGloss.X2Column);
            }
            
            public void SetX2Null() {
                this[this.tableGloss.X2Column] = System.Convert.DBNull;
            }
            
            public bool IsVerbNull() {
                return this.IsNull(this.tableGloss.VerbColumn);
            }
            
            public void SetVerbNull() {
                this[this.tableGloss.VerbColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostSNull() {
                return this.IsNull(this.tableGloss.PostSColumn);
            }
            
            public void SetPostSNull() {
                this[this.tableGloss.PostSColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GlossRowChangeEvent : EventArgs {
            
            private GlossRow eventRow;
            
            private DataRowAction eventAction;
            
            public GlossRowChangeEvent(GlossRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GlossRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
