<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="BuilderDialog_movedown" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>../BuilderDialog_movedown.bmp;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="BuilderDialog_moveup" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>../BuilderDialog_moveup.bmp;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="dataGridViewChartHelp" xml:space="preserve">
    <value>This chart is for entering the words of your vernacular text in order to do discourse analysis.
    
1) You can load a text for charting in one of two ways:
    a) Open a text file (e.g. an SFM document) with the "File", "Open" command. The lines of the text will be shown one at a 
        time in the "Workspace" box at the bottom of the program window. Use the "Skip to next line!" menu to skip non-text lines.
    b) Paste text directly into the Workspace window, by copying a paragraph worth of text to the clipboard from some program 
        (e.g. Ctrl+C in MS Word) and then right-clicking on the Workspace window.

2) Once you have text to chart in the Workspace window, you can do any of the following:
    a) Click on a cell in the chart to have the first/next word in the Workspace window moved to the chart cell you click on.
    b) Right-click on the chart in order to undo the last word moved (moves it back to the Workspace window)
    c) Click on the Workspace window itself to delete the next word (e.g. to skip past non-text words--e.g. SFM markers)
    
3) Column Order:
    You can drag the column headers in the upper chart to re-order them. When you do, the lower chart (if visible) will automatically 
    adjust to match. You can reposition any column except the reference column.
    
4) Reference numbers:
    a) When you click in a chart row for the first time, the row will automatically be given the reference number that is next 
        in order (e.g. if the previous row is "1a", then the next row will be made "1b", for: sentence "1", clause "b")
    b) If you want to make the reference skip to the next sentence number (i.e. to make "1b" into "2a"), then click once on the 
        reference ("Ref") column cell you want to change.
    c) If you accidentally go too far (e.g. to "3a" instead of "2a"), you can right-click on the reference cell to reset the 
        value to its initial value (i.e. "1b").

5) Transliteration:
    If you want to show a transliteration of the vernacular text in the chart, you can click the "File", "Transliteration", "Show" 
    menu item. If you have SILConverters installed (v2.2 and greater), the latin transliteration of the vernacular words will be 
    displayed in a parallel chart at the bottom of the program window. You can use the "File", "Transliteration", "Choose SILConverter" 
    menu to select a different transliterating converter (by default, it uses the "Any-Latin" ICU transliterator). Click on the row 
    header in the (upper) vernacular chart to select the rows of the text that you want to see transliterations for. The lower chart 
    will always show the transliteration of the rows selected in the upper chart.

6) Glossing:
    See the Readme document (e.g. "Help", "Open Readme") for information on providing word glosses from AdaptIt and SILConverters.
    </value>
  </data>
  <data name="dataGridViewGlossHelp" xml:space="preserve">
    <value>This chart is for viewing a (latin) transliteration and/or gloss of the words in your vernacular text chart above. 
Click on the row header(s) of the rows in the above chart to display the transliteration and/or gloss of those rows in this chart.

If you are showing glosses in this chart and the vernacular word is shown instead of a gloss, it means that the gloss lookup converter
was unable to find the gloss for that word in the AdaptIt knowledge base. You can right-click on such a cell to bring up the 
Add Knowledge Base Entry dialog box to enter the gloss and have it added to the knowledge base. Once you update the KB, then you 
need to click on the row header (in this chart) in order to have the glosses requeried from the knowledge base.
    </value>
  </data>
  <data name="DiscourseChart2HtmlFormatString" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>../DiscourseChart2HtmlFormatString.Xslt;System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;Windows-1252</value>
  </data>
  <data name="richTextBoxTextHelp" xml:space="preserve">
    <value>When you have text in this "Workspace" window, you can click on a cell in the chart above to have the first/next word 
moved to the chart cell you click on. If you right-click on the chart, the last word moved will be moved back to this box 
(e.g. to re-do the move to another cell). If you click on this box itself, then the next word in the window will be deleted 
(e.g. to skip past non-text words--e.g. SFM markers)
    </value>
  </data>
</root>
