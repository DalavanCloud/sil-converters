'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("SILConvertersInstallerDetails"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class SILConvertersInstallerDetails
    Inherits System.Data.DataSet
    
    Private tableMapsTables As MapsTablesDataTable
    
    Private tableMapTable As MapTableDataTable
    
    Private tableautoInstall As autoInstallDataTable
    
    Private tablescriptInstall As scriptInstallDataTable
    
    Private tableFilesToInstall As FilesToInstallDataTable
    
    Private tableFileToInstall As FileToInstallDataTable
    
    Private relationMapsTables_MapTable As System.Data.DataRelation
    
    Private relationMapTable_autoInstall As System.Data.DataRelation
    
    Private relationMapTable_scriptInstall As System.Data.DataRelation
    
    Private relationMapTable_FilesToInstall As System.Data.DataRelation
    
    Private relationFilesToInstall_FileToInstall As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MapsTables")) Is Nothing) Then
                MyBase.Tables.Add(New MapsTablesDataTable(ds.Tables("MapsTables")))
            End If
            If (Not (ds.Tables("MapTable")) Is Nothing) Then
                MyBase.Tables.Add(New MapTableDataTable(ds.Tables("MapTable")))
            End If
            If (Not (ds.Tables("autoInstall")) Is Nothing) Then
                MyBase.Tables.Add(New autoInstallDataTable(ds.Tables("autoInstall")))
            End If
            If (Not (ds.Tables("scriptInstall")) Is Nothing) Then
                MyBase.Tables.Add(New scriptInstallDataTable(ds.Tables("scriptInstall")))
            End If
            If (Not (ds.Tables("FilesToInstall")) Is Nothing) Then
                MyBase.Tables.Add(New FilesToInstallDataTable(ds.Tables("FilesToInstall")))
            End If
            If (Not (ds.Tables("FileToInstall")) Is Nothing) Then
                MyBase.Tables.Add(New FileToInstallDataTable(ds.Tables("FileToInstall")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MapsTables() As MapsTablesDataTable
        Get
            Return Me.tableMapsTables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MapTable() As MapTableDataTable
        Get
            Return Me.tableMapTable
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property autoInstall() As autoInstallDataTable
        Get
            Return Me.tableautoInstall
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property scriptInstall() As scriptInstallDataTable
        Get
            Return Me.tablescriptInstall
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FilesToInstall() As FilesToInstallDataTable
        Get
            Return Me.tableFilesToInstall
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FileToInstall() As FileToInstallDataTable
        Get
            Return Me.tableFileToInstall
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As SILConvertersInstallerDetails = CType(MyBase.Clone,SILConvertersInstallerDetails)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("MapsTables")) Is Nothing) Then
                MyBase.Tables.Add(New MapsTablesDataTable(ds.Tables("MapsTables")))
            End If
            If (Not (ds.Tables("MapTable")) Is Nothing) Then
                MyBase.Tables.Add(New MapTableDataTable(ds.Tables("MapTable")))
            End If
            If (Not (ds.Tables("autoInstall")) Is Nothing) Then
                MyBase.Tables.Add(New autoInstallDataTable(ds.Tables("autoInstall")))
            End If
            If (Not (ds.Tables("scriptInstall")) Is Nothing) Then
                MyBase.Tables.Add(New scriptInstallDataTable(ds.Tables("scriptInstall")))
            End If
            If (Not (ds.Tables("FilesToInstall")) Is Nothing) Then
                MyBase.Tables.Add(New FilesToInstallDataTable(ds.Tables("FilesToInstall")))
            End If
            If (Not (ds.Tables("FileToInstall")) Is Nothing) Then
                MyBase.Tables.Add(New FileToInstallDataTable(ds.Tables("FileToInstall")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableMapsTables = CType(MyBase.Tables("MapsTables"),MapsTablesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMapsTables) Is Nothing) Then
                Me.tableMapsTables.InitVars
            End If
        End If
        Me.tableMapTable = CType(MyBase.Tables("MapTable"),MapTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMapTable) Is Nothing) Then
                Me.tableMapTable.InitVars
            End If
        End If
        Me.tableautoInstall = CType(MyBase.Tables("autoInstall"),autoInstallDataTable)
        If (initTable = true) Then
            If (Not (Me.tableautoInstall) Is Nothing) Then
                Me.tableautoInstall.InitVars
            End If
        End If
        Me.tablescriptInstall = CType(MyBase.Tables("scriptInstall"),scriptInstallDataTable)
        If (initTable = true) Then
            If (Not (Me.tablescriptInstall) Is Nothing) Then
                Me.tablescriptInstall.InitVars
            End If
        End If
        Me.tableFilesToInstall = CType(MyBase.Tables("FilesToInstall"),FilesToInstallDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFilesToInstall) Is Nothing) Then
                Me.tableFilesToInstall.InitVars
            End If
        End If
        Me.tableFileToInstall = CType(MyBase.Tables("FileToInstall"),FileToInstallDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFileToInstall) Is Nothing) Then
                Me.tableFileToInstall.InitVars
            End If
        End If
        Me.relationMapsTables_MapTable = Me.Relations("MapsTables_MapTable")
        Me.relationMapTable_autoInstall = Me.Relations("MapTable_autoInstall")
        Me.relationMapTable_scriptInstall = Me.Relations("MapTable_scriptInstall")
        Me.relationMapTable_FilesToInstall = Me.Relations("MapTable_FilesToInstall")
        Me.relationFilesToInstall_FileToInstall = Me.Relations("FilesToInstall_FileToInstall")
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "SILConvertersInstallerDetails"
        Me.Prefix = ""
        Me.Namespace = "http://www.sil.org/computing/schemas/SILConvertersInstallerDetails.xsd"
        Me.EnforceConstraints = false
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableMapsTables = New MapsTablesDataTable
        MyBase.Tables.Add(Me.tableMapsTables)
        Me.tableMapTable = New MapTableDataTable
        MyBase.Tables.Add(Me.tableMapTable)
        Me.tableautoInstall = New autoInstallDataTable
        MyBase.Tables.Add(Me.tableautoInstall)
        Me.tablescriptInstall = New scriptInstallDataTable
        MyBase.Tables.Add(Me.tablescriptInstall)
        Me.tableFilesToInstall = New FilesToInstallDataTable
        MyBase.Tables.Add(Me.tableFilesToInstall)
        Me.tableFileToInstall = New FileToInstallDataTable
        MyBase.Tables.Add(Me.tableFileToInstall)
        Dim fkc As System.Data.ForeignKeyConstraint
        fkc = New System.Data.ForeignKeyConstraint("MapsTables_MapTable", New System.Data.DataColumn() {Me.tableMapsTables.MapsTables_IdColumn}, New System.Data.DataColumn() {Me.tableMapTable.MapsTables_IdColumn})
        Me.tableMapTable.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("MapTable_autoInstall", New System.Data.DataColumn() {Me.tableMapTable.MapTable_IdColumn}, New System.Data.DataColumn() {Me.tableautoInstall.MapTable_IdColumn})
        Me.tableautoInstall.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("MapTable_scriptInstall", New System.Data.DataColumn() {Me.tableMapTable.MapTable_IdColumn}, New System.Data.DataColumn() {Me.tablescriptInstall.MapTable_IdColumn})
        Me.tablescriptInstall.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("MapTable_FilesToInstall", New System.Data.DataColumn() {Me.tableMapTable.MapTable_IdColumn}, New System.Data.DataColumn() {Me.tableFilesToInstall.MapTable_IdColumn})
        Me.tableFilesToInstall.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("FilesToInstall_FileToInstall", New System.Data.DataColumn() {Me.tableFilesToInstall.FilesToInstall_IdColumn}, New System.Data.DataColumn() {Me.tableFileToInstall.FilesToInstall_IdColumn})
        Me.tableFileToInstall.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationMapsTables_MapTable = New System.Data.DataRelation("MapsTables_MapTable", New System.Data.DataColumn() {Me.tableMapsTables.MapsTables_IdColumn}, New System.Data.DataColumn() {Me.tableMapTable.MapsTables_IdColumn}, false)
        Me.relationMapsTables_MapTable.Nested = true
        Me.Relations.Add(Me.relationMapsTables_MapTable)
        Me.relationMapTable_autoInstall = New System.Data.DataRelation("MapTable_autoInstall", New System.Data.DataColumn() {Me.tableMapTable.MapTable_IdColumn}, New System.Data.DataColumn() {Me.tableautoInstall.MapTable_IdColumn}, false)
        Me.relationMapTable_autoInstall.Nested = true
        Me.Relations.Add(Me.relationMapTable_autoInstall)
        Me.relationMapTable_scriptInstall = New System.Data.DataRelation("MapTable_scriptInstall", New System.Data.DataColumn() {Me.tableMapTable.MapTable_IdColumn}, New System.Data.DataColumn() {Me.tablescriptInstall.MapTable_IdColumn}, false)
        Me.relationMapTable_scriptInstall.Nested = true
        Me.Relations.Add(Me.relationMapTable_scriptInstall)
        Me.relationMapTable_FilesToInstall = New System.Data.DataRelation("MapTable_FilesToInstall", New System.Data.DataColumn() {Me.tableMapTable.MapTable_IdColumn}, New System.Data.DataColumn() {Me.tableFilesToInstall.MapTable_IdColumn}, false)
        Me.relationMapTable_FilesToInstall.Nested = true
        Me.Relations.Add(Me.relationMapTable_FilesToInstall)
        Me.relationFilesToInstall_FileToInstall = New System.Data.DataRelation("FilesToInstall_FileToInstall", New System.Data.DataColumn() {Me.tableFilesToInstall.FilesToInstall_IdColumn}, New System.Data.DataColumn() {Me.tableFileToInstall.FilesToInstall_IdColumn}, false)
        Me.relationFilesToInstall_FileToInstall.Nested = true
        Me.Relations.Add(Me.relationFilesToInstall_FileToInstall)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMapsTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMapTable() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeautoInstall() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializescriptInstall() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFilesToInstall() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFileToInstall() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As SILConvertersInstallerDetails = New SILConvertersInstallerDetails
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub MapsTablesRowChangeEventHandler(ByVal sender As Object, ByVal e As MapsTablesRowChangeEvent)
    
    Public Delegate Sub MapTableRowChangeEventHandler(ByVal sender As Object, ByVal e As MapTableRowChangeEvent)
    
    Public Delegate Sub autoInstallRowChangeEventHandler(ByVal sender As Object, ByVal e As autoInstallRowChangeEvent)
    
    Public Delegate Sub scriptInstallRowChangeEventHandler(ByVal sender As Object, ByVal e As scriptInstallRowChangeEvent)
    
    Public Delegate Sub FilesToInstallRowChangeEventHandler(ByVal sender As Object, ByVal e As FilesToInstallRowChangeEvent)
    
    Public Delegate Sub FileToInstallRowChangeEventHandler(ByVal sender As Object, ByVal e As FileToInstallRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MapsTablesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMapsTables_Id As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MapsTables"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MapsTables_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnMapsTables_Id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MapsTablesRow
            Get
                Return CType(Me.Rows(index),MapsTablesRow)
            End Get
        End Property
        
        Public Event MapsTablesRowChanging As MapsTablesRowChangeEventHandler
        
        Public Event MapsTablesRowChanged As MapsTablesRowChangeEventHandler
        
        Public Event MapsTablesRowDeleting As MapsTablesRowChangeEventHandler
        
        Public Event MapsTablesRowDeleted As MapsTablesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMapsTablesRow(ByVal row As MapsTablesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMapsTablesRow() As MapsTablesRow
            Dim rowMapsTablesRow As MapsTablesRow = CType(Me.NewRow,MapsTablesRow)
            rowMapsTablesRow.ItemArray = New Object() {Nothing}
            Me.Rows.Add(rowMapsTablesRow)
            Return rowMapsTablesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As MapsTablesDataTable = CType(MyBase.Clone,MapsTablesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New MapsTablesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMapsTables_Id = MyBase.Columns("MapsTables_Id")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMapsTables_Id = New System.Data.DataColumn("MapsTables_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnMapsTables_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnMapsTables_Id}, true))
            Me.columnMapsTables_Id.AutoIncrement = true
            Me.columnMapsTables_Id.AllowDBNull = false
            Me.columnMapsTables_Id.Unique = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMapsTablesRow() As MapsTablesRow
            Return CType(Me.NewRow,MapsTablesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New MapsTablesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MapsTablesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MapsTablesRowChangedEvent) Is Nothing) Then
                RaiseEvent MapsTablesRowChanged(Me, New MapsTablesRowChangeEvent(CType(e.Row,MapsTablesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MapsTablesRowChangingEvent) Is Nothing) Then
                RaiseEvent MapsTablesRowChanging(Me, New MapsTablesRowChangeEvent(CType(e.Row,MapsTablesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MapsTablesRowDeletedEvent) Is Nothing) Then
                RaiseEvent MapsTablesRowDeleted(Me, New MapsTablesRowChangeEvent(CType(e.Row,MapsTablesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MapsTablesRowDeletingEvent) Is Nothing) Then
                RaiseEvent MapsTablesRowDeleting(Me, New MapsTablesRowChangeEvent(CType(e.Row,MapsTablesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMapsTablesRow(ByVal row As MapsTablesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As SILConvertersInstallerDetails = New SILConvertersInstallerDetails
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MapsTablesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MapTableDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columndescription As System.Data.DataColumn
        
        Private columnMapTable_Id As System.Data.DataColumn
        
        Private columnMapsTables_Id As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MapTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descriptionColumn() As System.Data.DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MapTable_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnMapTable_Id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MapsTables_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnMapsTables_Id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MapTableRow
            Get
                Return CType(Me.Rows(index),MapTableRow)
            End Get
        End Property
        
        Public Event MapTableRowChanging As MapTableRowChangeEventHandler
        
        Public Event MapTableRowChanged As MapTableRowChangeEventHandler
        
        Public Event MapTableRowDeleting As MapTableRowChangeEventHandler
        
        Public Event MapTableRowDeleted As MapTableRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMapTableRow(ByVal row As MapTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMapTableRow(ByVal description As String, ByVal parentMapsTablesRowByMapsTables_MapTable As MapsTablesRow) As MapTableRow
            Dim rowMapTableRow As MapTableRow = CType(Me.NewRow,MapTableRow)
            rowMapTableRow.ItemArray = New Object() {description, Nothing, parentMapsTablesRowByMapsTables_MapTable(0)}
            Me.Rows.Add(rowMapTableRow)
            Return rowMapTableRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As MapTableDataTable = CType(MyBase.Clone,MapTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New MapTableDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columndescription = MyBase.Columns("description")
            Me.columnMapTable_Id = MyBase.Columns("MapTable_Id")
            Me.columnMapsTables_Id = MyBase.Columns("MapsTables_Id")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columndescription = New System.Data.DataColumn("description", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columndescription)
            Me.columnMapTable_Id = New System.Data.DataColumn("MapTable_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnMapTable_Id)
            Me.columnMapsTables_Id = New System.Data.DataColumn("MapsTables_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnMapsTables_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnMapTable_Id}, true))
            Me.columndescription.Namespace = ""
            Me.columnMapTable_Id.AutoIncrement = true
            Me.columnMapTable_Id.AllowDBNull = false
            Me.columnMapTable_Id.Unique = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMapTableRow() As MapTableRow
            Return CType(Me.NewRow,MapTableRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New MapTableRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MapTableRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MapTableRowChangedEvent) Is Nothing) Then
                RaiseEvent MapTableRowChanged(Me, New MapTableRowChangeEvent(CType(e.Row,MapTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MapTableRowChangingEvent) Is Nothing) Then
                RaiseEvent MapTableRowChanging(Me, New MapTableRowChangeEvent(CType(e.Row,MapTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MapTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent MapTableRowDeleted(Me, New MapTableRowChangeEvent(CType(e.Row,MapTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MapTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent MapTableRowDeleting(Me, New MapTableRowChangeEvent(CType(e.Row,MapTableRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMapTableRow(ByVal row As MapTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As SILConvertersInstallerDetails = New SILConvertersInstallerDetails
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MapTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class autoInstallDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmappingName As System.Data.DataColumn
        
        Private columnconverterSpec As System.Data.DataColumn
        
        Private columnIsConverterSpecAFile As System.Data.DataColumn
        
        Private columnconversionType As System.Data.DataColumn
        
        Private columnimplementType As System.Data.DataColumn
        
        Private columnleftEncoding As System.Data.DataColumn
        
        Private columnrightEncoding As System.Data.DataColumn
        
        Private columnprocessType As System.Data.DataColumn
        
        Private columnsampleData As System.Data.DataColumn
        
        Private columnMapTable_Id As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "autoInstall"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mappingNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnmappingName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property converterSpecColumn() As System.Data.DataColumn
            Get
                Return Me.columnconverterSpec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsConverterSpecAFileColumn() As System.Data.DataColumn
            Get
                Return Me.columnIsConverterSpecAFile
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property conversionTypeColumn() As System.Data.DataColumn
            Get
                Return Me.columnconversionType
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property implementTypeColumn() As System.Data.DataColumn
            Get
                Return Me.columnimplementType
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property leftEncodingColumn() As System.Data.DataColumn
            Get
                Return Me.columnleftEncoding
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rightEncodingColumn() As System.Data.DataColumn
            Get
                Return Me.columnrightEncoding
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property processTypeColumn() As System.Data.DataColumn
            Get
                Return Me.columnprocessType
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sampleDataColumn() As System.Data.DataColumn
            Get
                Return Me.columnsampleData
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MapTable_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnMapTable_Id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As autoInstallRow
            Get
                Return CType(Me.Rows(index),autoInstallRow)
            End Get
        End Property
        
        Public Event autoInstallRowChanging As autoInstallRowChangeEventHandler
        
        Public Event autoInstallRowChanged As autoInstallRowChangeEventHandler
        
        Public Event autoInstallRowDeleting As autoInstallRowChangeEventHandler
        
        Public Event autoInstallRowDeleted As autoInstallRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddautoInstallRow(ByVal row As autoInstallRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddautoInstallRow(ByVal mappingName As String, ByVal converterSpec As String, ByVal IsConverterSpecAFile As Boolean, ByVal conversionType As String, ByVal implementType As String, ByVal leftEncoding As String, ByVal rightEncoding As String, ByVal processType As String, ByVal sampleData As String, ByVal parentMapTableRowByMapTable_autoInstall As MapTableRow) As autoInstallRow
            Dim rowautoInstallRow As autoInstallRow = CType(Me.NewRow,autoInstallRow)
            rowautoInstallRow.ItemArray = New Object() {mappingName, converterSpec, IsConverterSpecAFile, conversionType, implementType, leftEncoding, rightEncoding, processType, sampleData, parentMapTableRowByMapTable_autoInstall(1)}
            Me.Rows.Add(rowautoInstallRow)
            Return rowautoInstallRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBymappingNameconverterSpec(ByVal mappingName As String, ByVal converterSpec As String) As autoInstallRow
            Return CType(Me.Rows.Find(New Object() {mappingName, converterSpec}),autoInstallRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As autoInstallDataTable = CType(MyBase.Clone,autoInstallDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New autoInstallDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmappingName = MyBase.Columns("mappingName")
            Me.columnconverterSpec = MyBase.Columns("converterSpec")
            Me.columnIsConverterSpecAFile = MyBase.Columns("IsConverterSpecAFile")
            Me.columnconversionType = MyBase.Columns("conversionType")
            Me.columnimplementType = MyBase.Columns("implementType")
            Me.columnleftEncoding = MyBase.Columns("leftEncoding")
            Me.columnrightEncoding = MyBase.Columns("rightEncoding")
            Me.columnprocessType = MyBase.Columns("processType")
            Me.columnsampleData = MyBase.Columns("sampleData")
            Me.columnMapTable_Id = MyBase.Columns("MapTable_Id")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmappingName = New System.Data.DataColumn("mappingName", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnmappingName)
            Me.columnconverterSpec = New System.Data.DataColumn("converterSpec", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnconverterSpec)
            Me.columnIsConverterSpecAFile = New System.Data.DataColumn("IsConverterSpecAFile", GetType(Boolean), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnIsConverterSpecAFile)
            Me.columnconversionType = New System.Data.DataColumn("conversionType", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnconversionType)
            Me.columnimplementType = New System.Data.DataColumn("implementType", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnimplementType)
            Me.columnleftEncoding = New System.Data.DataColumn("leftEncoding", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnleftEncoding)
            Me.columnrightEncoding = New System.Data.DataColumn("rightEncoding", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnrightEncoding)
            Me.columnprocessType = New System.Data.DataColumn("processType", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnprocessType)
            Me.columnsampleData = New System.Data.DataColumn("sampleData", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnsampleData)
            Me.columnMapTable_Id = New System.Data.DataColumn("MapTable_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnMapTable_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("MapNamePlusConverterSpecKey", New System.Data.DataColumn() {Me.columnmappingName, Me.columnconverterSpec}, true))
            Me.columnmappingName.AllowDBNull = false
            Me.columnmappingName.Namespace = ""
            Me.columnconverterSpec.AllowDBNull = false
            Me.columnconverterSpec.Namespace = ""
            Me.columnIsConverterSpecAFile.Namespace = ""
            Me.columnIsConverterSpecAFile.DefaultValue = CType(false,Boolean)
            Me.columnconversionType.AllowDBNull = false
            Me.columnconversionType.Namespace = ""
            Me.columnimplementType.AllowDBNull = false
            Me.columnimplementType.Namespace = ""
            Me.columnleftEncoding.Namespace = ""
            Me.columnleftEncoding.DefaultValue = CType("",String)
            Me.columnrightEncoding.Namespace = ""
            Me.columnrightEncoding.DefaultValue = CType("",String)
            Me.columnprocessType.Namespace = ""
            Me.columnprocessType.DefaultValue = CType("DontKnow",String)
            Me.columnsampleData.Namespace = ""
            Me.columnsampleData.DefaultValue = CType("Test Data",String)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewautoInstallRow() As autoInstallRow
            Return CType(Me.NewRow,autoInstallRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New autoInstallRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(autoInstallRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.autoInstallRowChangedEvent) Is Nothing) Then
                RaiseEvent autoInstallRowChanged(Me, New autoInstallRowChangeEvent(CType(e.Row,autoInstallRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.autoInstallRowChangingEvent) Is Nothing) Then
                RaiseEvent autoInstallRowChanging(Me, New autoInstallRowChangeEvent(CType(e.Row,autoInstallRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.autoInstallRowDeletedEvent) Is Nothing) Then
                RaiseEvent autoInstallRowDeleted(Me, New autoInstallRowChangeEvent(CType(e.Row,autoInstallRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.autoInstallRowDeletingEvent) Is Nothing) Then
                RaiseEvent autoInstallRowDeleting(Me, New autoInstallRowChangeEvent(CType(e.Row,autoInstallRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveautoInstallRow(ByVal row As autoInstallRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As SILConvertersInstallerDetails = New SILConvertersInstallerDetails
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "autoInstallDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class scriptInstallDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnfilename As System.Data.DataColumn
        
        Private columnmappingName As System.Data.DataColumn
        
        Private columnimplementType As System.Data.DataColumn
        
        Private columnconversionType As System.Data.DataColumn
        
        Private columnconverterSpec As System.Data.DataColumn
        
        Private columnIsConverterSpecAFile As System.Data.DataColumn
        
        Private columnsampleData As System.Data.DataColumn
        
        Private columnMapTable_Id As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "scriptInstall"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property filenameColumn() As System.Data.DataColumn
            Get
                Return Me.columnfilename
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mappingNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnmappingName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property implementTypeColumn() As System.Data.DataColumn
            Get
                Return Me.columnimplementType
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property conversionTypeColumn() As System.Data.DataColumn
            Get
                Return Me.columnconversionType
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property converterSpecColumn() As System.Data.DataColumn
            Get
                Return Me.columnconverterSpec
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsConverterSpecAFileColumn() As System.Data.DataColumn
            Get
                Return Me.columnIsConverterSpecAFile
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sampleDataColumn() As System.Data.DataColumn
            Get
                Return Me.columnsampleData
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MapTable_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnMapTable_Id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As scriptInstallRow
            Get
                Return CType(Me.Rows(index),scriptInstallRow)
            End Get
        End Property
        
        Public Event scriptInstallRowChanging As scriptInstallRowChangeEventHandler
        
        Public Event scriptInstallRowChanged As scriptInstallRowChangeEventHandler
        
        Public Event scriptInstallRowDeleting As scriptInstallRowChangeEventHandler
        
        Public Event scriptInstallRowDeleted As scriptInstallRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddscriptInstallRow(ByVal row As scriptInstallRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddscriptInstallRow(ByVal filename As String, ByVal mappingName As String, ByVal implementType As String, ByVal conversionType As String, ByVal converterSpec As String, ByVal IsConverterSpecAFile As Boolean, ByVal sampleData As String, ByVal parentMapTableRowByMapTable_scriptInstall As MapTableRow) As scriptInstallRow
            Dim rowscriptInstallRow As scriptInstallRow = CType(Me.NewRow,scriptInstallRow)
            rowscriptInstallRow.ItemArray = New Object() {filename, mappingName, implementType, conversionType, converterSpec, IsConverterSpecAFile, sampleData, parentMapTableRowByMapTable_scriptInstall(1)}
            Me.Rows.Add(rowscriptInstallRow)
            Return rowscriptInstallRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByfilename(ByVal filename As String) As scriptInstallRow
            Return CType(Me.Rows.Find(New Object() {filename}),scriptInstallRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As scriptInstallDataTable = CType(MyBase.Clone,scriptInstallDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New scriptInstallDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnfilename = MyBase.Columns("filename")
            Me.columnmappingName = MyBase.Columns("mappingName")
            Me.columnimplementType = MyBase.Columns("implementType")
            Me.columnconversionType = MyBase.Columns("conversionType")
            Me.columnconverterSpec = MyBase.Columns("converterSpec")
            Me.columnIsConverterSpecAFile = MyBase.Columns("IsConverterSpecAFile")
            Me.columnsampleData = MyBase.Columns("sampleData")
            Me.columnMapTable_Id = MyBase.Columns("MapTable_Id")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnfilename = New System.Data.DataColumn("filename", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnfilename)
            Me.columnmappingName = New System.Data.DataColumn("mappingName", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnmappingName)
            Me.columnimplementType = New System.Data.DataColumn("implementType", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnimplementType)
            Me.columnconversionType = New System.Data.DataColumn("conversionType", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnconversionType)
            Me.columnconverterSpec = New System.Data.DataColumn("converterSpec", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnconverterSpec)
            Me.columnIsConverterSpecAFile = New System.Data.DataColumn("IsConverterSpecAFile", GetType(Boolean), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnIsConverterSpecAFile)
            Me.columnsampleData = New System.Data.DataColumn("sampleData", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnsampleData)
            Me.columnMapTable_Id = New System.Data.DataColumn("MapTable_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnMapTable_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("ScriptNameKey", New System.Data.DataColumn() {Me.columnfilename}, true))
            Me.columnfilename.AllowDBNull = false
            Me.columnfilename.Unique = true
            Me.columnfilename.Namespace = ""
            Me.columnmappingName.AllowDBNull = false
            Me.columnmappingName.Namespace = ""
            Me.columnimplementType.AllowDBNull = false
            Me.columnimplementType.Namespace = ""
            Me.columnconversionType.Namespace = ""
            Me.columnconverterSpec.Namespace = ""
            Me.columnIsConverterSpecAFile.Namespace = ""
            Me.columnIsConverterSpecAFile.DefaultValue = CType(false,Boolean)
            Me.columnsampleData.Namespace = ""
            Me.columnsampleData.DefaultValue = CType("Test Data",String)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewscriptInstallRow() As scriptInstallRow
            Return CType(Me.NewRow,scriptInstallRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New scriptInstallRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(scriptInstallRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.scriptInstallRowChangedEvent) Is Nothing) Then
                RaiseEvent scriptInstallRowChanged(Me, New scriptInstallRowChangeEvent(CType(e.Row,scriptInstallRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.scriptInstallRowChangingEvent) Is Nothing) Then
                RaiseEvent scriptInstallRowChanging(Me, New scriptInstallRowChangeEvent(CType(e.Row,scriptInstallRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.scriptInstallRowDeletedEvent) Is Nothing) Then
                RaiseEvent scriptInstallRowDeleted(Me, New scriptInstallRowChangeEvent(CType(e.Row,scriptInstallRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.scriptInstallRowDeletingEvent) Is Nothing) Then
                RaiseEvent scriptInstallRowDeleting(Me, New scriptInstallRowChangeEvent(CType(e.Row,scriptInstallRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovescriptInstallRow(ByVal row As scriptInstallRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As SILConvertersInstallerDetails = New SILConvertersInstallerDetails
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "scriptInstallDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FilesToInstallDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFilesToInstall_Id As System.Data.DataColumn
        
        Private columnMapTable_Id As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FilesToInstall"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FilesToInstall_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnFilesToInstall_Id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MapTable_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnMapTable_Id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FilesToInstallRow
            Get
                Return CType(Me.Rows(index),FilesToInstallRow)
            End Get
        End Property
        
        Public Event FilesToInstallRowChanging As FilesToInstallRowChangeEventHandler
        
        Public Event FilesToInstallRowChanged As FilesToInstallRowChangeEventHandler
        
        Public Event FilesToInstallRowDeleting As FilesToInstallRowChangeEventHandler
        
        Public Event FilesToInstallRowDeleted As FilesToInstallRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFilesToInstallRow(ByVal row As FilesToInstallRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFilesToInstallRow(ByVal parentMapTableRowByMapTable_FilesToInstall As MapTableRow) As FilesToInstallRow
            Dim rowFilesToInstallRow As FilesToInstallRow = CType(Me.NewRow,FilesToInstallRow)
            rowFilesToInstallRow.ItemArray = New Object() {Nothing, parentMapTableRowByMapTable_FilesToInstall(1)}
            Me.Rows.Add(rowFilesToInstallRow)
            Return rowFilesToInstallRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FilesToInstallDataTable = CType(MyBase.Clone,FilesToInstallDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FilesToInstallDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFilesToInstall_Id = MyBase.Columns("FilesToInstall_Id")
            Me.columnMapTable_Id = MyBase.Columns("MapTable_Id")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFilesToInstall_Id = New System.Data.DataColumn("FilesToInstall_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnFilesToInstall_Id)
            Me.columnMapTable_Id = New System.Data.DataColumn("MapTable_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnMapTable_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFilesToInstall_Id}, true))
            Me.columnFilesToInstall_Id.AutoIncrement = true
            Me.columnFilesToInstall_Id.AllowDBNull = false
            Me.columnFilesToInstall_Id.Unique = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFilesToInstallRow() As FilesToInstallRow
            Return CType(Me.NewRow,FilesToInstallRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FilesToInstallRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FilesToInstallRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FilesToInstallRowChangedEvent) Is Nothing) Then
                RaiseEvent FilesToInstallRowChanged(Me, New FilesToInstallRowChangeEvent(CType(e.Row,FilesToInstallRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FilesToInstallRowChangingEvent) Is Nothing) Then
                RaiseEvent FilesToInstallRowChanging(Me, New FilesToInstallRowChangeEvent(CType(e.Row,FilesToInstallRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FilesToInstallRowDeletedEvent) Is Nothing) Then
                RaiseEvent FilesToInstallRowDeleted(Me, New FilesToInstallRowChangeEvent(CType(e.Row,FilesToInstallRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FilesToInstallRowDeletingEvent) Is Nothing) Then
                RaiseEvent FilesToInstallRowDeleting(Me, New FilesToInstallRowChangeEvent(CType(e.Row,FilesToInstallRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFilesToInstallRow(ByVal row As FilesToInstallRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As SILConvertersInstallerDetails = New SILConvertersInstallerDetails
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FilesToInstallDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FileToInstallDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnfilename As System.Data.DataColumn
        
        Private columnFilesToInstall_Id As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FileToInstall"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property filenameColumn() As System.Data.DataColumn
            Get
                Return Me.columnfilename
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FilesToInstall_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnFilesToInstall_Id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FileToInstallRow
            Get
                Return CType(Me.Rows(index),FileToInstallRow)
            End Get
        End Property
        
        Public Event FileToInstallRowChanging As FileToInstallRowChangeEventHandler
        
        Public Event FileToInstallRowChanged As FileToInstallRowChangeEventHandler
        
        Public Event FileToInstallRowDeleting As FileToInstallRowChangeEventHandler
        
        Public Event FileToInstallRowDeleted As FileToInstallRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFileToInstallRow(ByVal row As FileToInstallRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFileToInstallRow(ByVal filename As String, ByVal parentFilesToInstallRowByFilesToInstall_FileToInstall As FilesToInstallRow) As FileToInstallRow
            Dim rowFileToInstallRow As FileToInstallRow = CType(Me.NewRow,FileToInstallRow)
            rowFileToInstallRow.ItemArray = New Object() {filename, parentFilesToInstallRowByFilesToInstall_FileToInstall(0)}
            Me.Rows.Add(rowFileToInstallRow)
            Return rowFileToInstallRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FileToInstallDataTable = CType(MyBase.Clone,FileToInstallDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FileToInstallDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnfilename = MyBase.Columns("filename")
            Me.columnFilesToInstall_Id = MyBase.Columns("FilesToInstall_Id")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnfilename = New System.Data.DataColumn("filename", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnfilename)
            Me.columnFilesToInstall_Id = New System.Data.DataColumn("FilesToInstall_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnFilesToInstall_Id)
            Me.columnfilename.AllowDBNull = false
            Me.columnfilename.Namespace = ""
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFileToInstallRow() As FileToInstallRow
            Return CType(Me.NewRow,FileToInstallRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FileToInstallRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FileToInstallRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FileToInstallRowChangedEvent) Is Nothing) Then
                RaiseEvent FileToInstallRowChanged(Me, New FileToInstallRowChangeEvent(CType(e.Row,FileToInstallRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FileToInstallRowChangingEvent) Is Nothing) Then
                RaiseEvent FileToInstallRowChanging(Me, New FileToInstallRowChangeEvent(CType(e.Row,FileToInstallRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FileToInstallRowDeletedEvent) Is Nothing) Then
                RaiseEvent FileToInstallRowDeleted(Me, New FileToInstallRowChangeEvent(CType(e.Row,FileToInstallRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FileToInstallRowDeletingEvent) Is Nothing) Then
                RaiseEvent FileToInstallRowDeleting(Me, New FileToInstallRowChangeEvent(CType(e.Row,FileToInstallRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFileToInstallRow(ByVal row As FileToInstallRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As SILConvertersInstallerDetails = New SILConvertersInstallerDetails
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FileToInstallDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MapsTablesRow
        Inherits System.Data.DataRow
        
        Private tableMapsTables As MapsTablesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMapsTables = CType(Me.Table,MapsTablesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MapsTables_Id() As Integer
            Get
                Return CType(Me(Me.tableMapsTables.MapsTables_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableMapsTables.MapsTables_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMapTableRows() As MapTableRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("MapsTables_MapTable")),MapTableRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MapTableRow
        Inherits System.Data.DataRow
        
        Private tableMapTable As MapTableDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMapTable = CType(Me.Table,MapTableDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property description() As String
            Get
                Try 
                    Return CType(Me(Me.tableMapTable.descriptionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'description' in table 'MapTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMapTable.descriptionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MapTable_Id() As Integer
            Get
                Return CType(Me(Me.tableMapTable.MapTable_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableMapTable.MapTable_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MapsTables_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMapTable.MapsTables_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'MapsTables_Id' in table 'MapTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMapTable.MapsTables_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MapsTablesRow() As MapsTablesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("MapsTables_MapTable")),MapsTablesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("MapsTables_MapTable"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tableMapTable.descriptionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescriptionNull()
            Me(Me.tableMapTable.descriptionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMapsTables_IdNull() As Boolean
            Return Me.IsNull(Me.tableMapTable.MapsTables_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMapsTables_IdNull()
            Me(Me.tableMapTable.MapsTables_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetautoInstallRows() As autoInstallRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("MapTable_autoInstall")),autoInstallRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetscriptInstallRows() As scriptInstallRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("MapTable_scriptInstall")),scriptInstallRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetFilesToInstallRows() As FilesToInstallRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("MapTable_FilesToInstall")),FilesToInstallRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class autoInstallRow
        Inherits System.Data.DataRow
        
        Private tableautoInstall As autoInstallDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableautoInstall = CType(Me.Table,autoInstallDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mappingName() As String
            Get
                Return CType(Me(Me.tableautoInstall.mappingNameColumn),String)
            End Get
            Set
                Me(Me.tableautoInstall.mappingNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property converterSpec() As String
            Get
                Return CType(Me(Me.tableautoInstall.converterSpecColumn),String)
            End Get
            Set
                Me(Me.tableautoInstall.converterSpecColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsConverterSpecAFile() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableautoInstall.IsConverterSpecAFileColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'IsConverterSpecAFile' in table 'autoInstall' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableautoInstall.IsConverterSpecAFileColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property conversionType() As String
            Get
                Return CType(Me(Me.tableautoInstall.conversionTypeColumn),String)
            End Get
            Set
                Me(Me.tableautoInstall.conversionTypeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property implementType() As String
            Get
                Return CType(Me(Me.tableautoInstall.implementTypeColumn),String)
            End Get
            Set
                Me(Me.tableautoInstall.implementTypeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property leftEncoding() As String
            Get
                Try 
                    Return CType(Me(Me.tableautoInstall.leftEncodingColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'leftEncoding' in table 'autoInstall' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableautoInstall.leftEncodingColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rightEncoding() As String
            Get
                Try 
                    Return CType(Me(Me.tableautoInstall.rightEncodingColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'rightEncoding' in table 'autoInstall' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableautoInstall.rightEncodingColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property processType() As String
            Get
                Try 
                    Return CType(Me(Me.tableautoInstall.processTypeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'processType' in table 'autoInstall' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableautoInstall.processTypeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sampleData() As String
            Get
                Try 
                    Return CType(Me(Me.tableautoInstall.sampleDataColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'sampleData' in table 'autoInstall' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableautoInstall.sampleDataColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MapTable_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableautoInstall.MapTable_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'MapTable_Id' in table 'autoInstall' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableautoInstall.MapTable_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MapTableRow() As MapTableRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("MapTable_autoInstall")),MapTableRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("MapTable_autoInstall"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsConverterSpecAFileNull() As Boolean
            Return Me.IsNull(Me.tableautoInstall.IsConverterSpecAFileColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsConverterSpecAFileNull()
            Me(Me.tableautoInstall.IsConverterSpecAFileColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsleftEncodingNull() As Boolean
            Return Me.IsNull(Me.tableautoInstall.leftEncodingColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetleftEncodingNull()
            Me(Me.tableautoInstall.leftEncodingColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrightEncodingNull() As Boolean
            Return Me.IsNull(Me.tableautoInstall.rightEncodingColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrightEncodingNull()
            Me(Me.tableautoInstall.rightEncodingColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsprocessTypeNull() As Boolean
            Return Me.IsNull(Me.tableautoInstall.processTypeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetprocessTypeNull()
            Me(Me.tableautoInstall.processTypeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssampleDataNull() As Boolean
            Return Me.IsNull(Me.tableautoInstall.sampleDataColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsampleDataNull()
            Me(Me.tableautoInstall.sampleDataColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMapTable_IdNull() As Boolean
            Return Me.IsNull(Me.tableautoInstall.MapTable_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMapTable_IdNull()
            Me(Me.tableautoInstall.MapTable_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class scriptInstallRow
        Inherits System.Data.DataRow
        
        Private tablescriptInstall As scriptInstallDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablescriptInstall = CType(Me.Table,scriptInstallDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property filename() As String
            Get
                Return CType(Me(Me.tablescriptInstall.filenameColumn),String)
            End Get
            Set
                Me(Me.tablescriptInstall.filenameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mappingName() As String
            Get
                Return CType(Me(Me.tablescriptInstall.mappingNameColumn),String)
            End Get
            Set
                Me(Me.tablescriptInstall.mappingNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property implementType() As String
            Get
                Return CType(Me(Me.tablescriptInstall.implementTypeColumn),String)
            End Get
            Set
                Me(Me.tablescriptInstall.implementTypeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property conversionType() As String
            Get
                Try 
                    Return CType(Me(Me.tablescriptInstall.conversionTypeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'conversionType' in table 'scriptInstall' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablescriptInstall.conversionTypeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property converterSpec() As String
            Get
                Try 
                    Return CType(Me(Me.tablescriptInstall.converterSpecColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'converterSpec' in table 'scriptInstall' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablescriptInstall.converterSpecColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsConverterSpecAFile() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablescriptInstall.IsConverterSpecAFileColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'IsConverterSpecAFile' in table 'scriptInstall' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablescriptInstall.IsConverterSpecAFileColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sampleData() As String
            Get
                Try 
                    Return CType(Me(Me.tablescriptInstall.sampleDataColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'sampleData' in table 'scriptInstall' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablescriptInstall.sampleDataColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MapTable_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablescriptInstall.MapTable_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'MapTable_Id' in table 'scriptInstall' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablescriptInstall.MapTable_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MapTableRow() As MapTableRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("MapTable_scriptInstall")),MapTableRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("MapTable_scriptInstall"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsconversionTypeNull() As Boolean
            Return Me.IsNull(Me.tablescriptInstall.conversionTypeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetconversionTypeNull()
            Me(Me.tablescriptInstall.conversionTypeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsconverterSpecNull() As Boolean
            Return Me.IsNull(Me.tablescriptInstall.converterSpecColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetconverterSpecNull()
            Me(Me.tablescriptInstall.converterSpecColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsConverterSpecAFileNull() As Boolean
            Return Me.IsNull(Me.tablescriptInstall.IsConverterSpecAFileColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsConverterSpecAFileNull()
            Me(Me.tablescriptInstall.IsConverterSpecAFileColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssampleDataNull() As Boolean
            Return Me.IsNull(Me.tablescriptInstall.sampleDataColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsampleDataNull()
            Me(Me.tablescriptInstall.sampleDataColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMapTable_IdNull() As Boolean
            Return Me.IsNull(Me.tablescriptInstall.MapTable_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMapTable_IdNull()
            Me(Me.tablescriptInstall.MapTable_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FilesToInstallRow
        Inherits System.Data.DataRow
        
        Private tableFilesToInstall As FilesToInstallDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFilesToInstall = CType(Me.Table,FilesToInstallDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FilesToInstall_Id() As Integer
            Get
                Return CType(Me(Me.tableFilesToInstall.FilesToInstall_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableFilesToInstall.FilesToInstall_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MapTable_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFilesToInstall.MapTable_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'MapTable_Id' in table 'FilesToInstall' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFilesToInstall.MapTable_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MapTableRow() As MapTableRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("MapTable_FilesToInstall")),MapTableRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("MapTable_FilesToInstall"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMapTable_IdNull() As Boolean
            Return Me.IsNull(Me.tableFilesToInstall.MapTable_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMapTable_IdNull()
            Me(Me.tableFilesToInstall.MapTable_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetFileToInstallRows() As FileToInstallRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FilesToInstall_FileToInstall")),FileToInstallRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FileToInstallRow
        Inherits System.Data.DataRow
        
        Private tableFileToInstall As FileToInstallDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFileToInstall = CType(Me.Table,FileToInstallDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property filename() As String
            Get
                Return CType(Me(Me.tableFileToInstall.filenameColumn),String)
            End Get
            Set
                Me(Me.tableFileToInstall.filenameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FilesToInstall_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFileToInstall.FilesToInstall_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'FilesToInstall_Id' in table 'FileToInstall' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFileToInstall.FilesToInstall_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FilesToInstallRow() As FilesToInstallRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FilesToInstall_FileToInstall")),FilesToInstallRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FilesToInstall_FileToInstall"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFilesToInstall_IdNull() As Boolean
            Return Me.IsNull(Me.tableFileToInstall.FilesToInstall_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFilesToInstall_IdNull()
            Me(Me.tableFileToInstall.FilesToInstall_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MapsTablesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As MapsTablesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MapsTablesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MapsTablesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MapTableRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As MapTableRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MapTableRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MapTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class autoInstallRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As autoInstallRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As autoInstallRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As autoInstallRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class scriptInstallRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As scriptInstallRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As scriptInstallRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As scriptInstallRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FilesToInstallRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FilesToInstallRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FilesToInstallRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FilesToInstallRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FileToInstallRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FileToInstallRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FileToInstallRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FileToInstallRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
