//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TECkit_Mapping_Editor.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("TECkit_Mapping_Editor.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///This drop down list contains all the possible ranges of Unicode characters.
        ///You can change the range of characters displayed in the above grid by selecting
        ///a different range from this list.
        ///    .
        /// </summary>
        internal static string ComboUnicodeRangeHelpString {
            get {
                return ResourceManager.GetString("ComboUnicodeRangeHelpString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This pane displays compiler errors. 
        ///
        ///The program is configured to automatically compile the map whenever changes are
        ///made so that you can see where problems in syntax occur more easily. To turn off
        ///automatic compiling of the map, press the F5 key (or use the 
        ///&apos;File&apos;, &apos;Auto-Compile&apos; command).
        ///
        ///If an error is displayed here, you can click on the error message to jump to the 
        ///corresponding line in the map where the error occurred.
        ///    .
        /// </summary>
        internal static string CompilerResults {
            get {
                return ResourceManager.GetString("CompilerResults", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check this box to show the characters in the sample string 
        ///enclosed in double-quotes.
        ///
        ///For example, if the Sample box contains the letter &quot;A&quot;, then the
        ///corresponding cell would show &quot;A&quot;.
        ///    .
        /// </summary>
        internal static string CPChars {
            get {
                return ResourceManager.GetString("CPChars", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///This window displays the characters in the font you&apos;ve specified for either the
        ///left or right-hand side of the conversion. If this corresponds to a Legacy (non-Unicode) 
        ///encoding, then all (upto) 255 characters in the font will be displayed. If it corresponds 
        ///to a Unicode encoding, then only a range of 128 characters will be displayed along with a 
        ///combo box with which you can switch the range being displayed.
        ///
        ///If you want to change the font, on the main form, click &quot;View&quot;, &quot;Configure Left-side fon [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CPDataGridCharacters {
            get {
                return ResourceManager.GetString("CPDataGridCharacters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///This control displays the code point values of the characters entered 
        ///into either the Left-side Sample box or the Right-side Sample box 
        ///(at the bottom of the main Form). Click in the Sample box which contains 
        ///the characters whose code point values you want to see displayed here.
        ///
        ///For example, if you are creating a Legacy_to_from_Unicode converter,
        ///then the Left-side Sample box will contain data in a Legacy (non-
        ///Unicode) encoded font. To use these code point values in a TECkit 
        ///map, you&apos;ll want [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CPDataGridCodePoints {
            get {
                return ResourceManager.GetString("CPDataGridCodePoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check this box to show the decimal format of the characters 
        ///in the sample string.
        ///
        ///For example, if the Sample box contains the letter &quot;A&quot;, then the
        ///corresponding cell would show &quot;65&quot;
        ///    .
        /// </summary>
        internal static string CPDecValues {
            get {
                return ResourceManager.GetString("CPDecValues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check this box to show the hex format of the characters in the 
        ///sample string. 
        ///
        ///For example, if the Sample box contains the letter &quot;A&quot;, then the
        ///corresponding cell would show &quot;0x41&quot;.
        ///    .
        /// </summary>
        internal static string CPHexValues {
            get {
                return ResourceManager.GetString("CPHexValues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check this box to show the Unicode names for the characters in the 
        ///sample string. 
        ///
        ///For example, if the Sample box contains the letter &quot;A&quot;, then the 
        ///corresponding cell would show &quot;latin_capital_letter_a&quot;.
        ///    .
        /// </summary>
        internal static string CPUnicodeNames {
            get {
                return ResourceManager.GetString("CPUnicodeNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check this box to show the Unicode values for the characters 
        ///in the sample string.
        ///
        ///For example, if the Sample box contains the letter &quot;A&quot;, then the 
        ///corresponding cell would show &quot;U+0041&quot;.
        ///    .
        /// </summary>
        internal static string CPUnicodeValues {
            get {
                return ResourceManager.GetString("CPUnicodeValues", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap DragSrc {
            get {
                object obj = ResourceManager.GetObject("DragSrc", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///This pane is for editing the TECkit map.
        ///
        ///A new, blank map is automatically loaded with a typical TECkit map header depending 
        ///on the type of converter you are creating (which you choose when starting the program 
        ///or when you click &apos;File&apos;, &apos;New&apos; to create a new map). Be sure to edit the map properies 
        ///appropriately for the encoding that it applies to. Also, note that the first several 
        ///lines of comments at the top of the map file contain information used by the editor 
        ///(e.g. conversion type, font n [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MainEditor {
            get {
                return ResourceManager.GetString("MainEditor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Enter some sample data here to test the map.
        ///
        ///You can type characters here (e.g. using a Keyman keyboard) or you can add them from the Code Point Values dialog box by holding down the CTRL key and 
        ///clicking on the cells in the character map grid.
        ///
        ///The code point values of the characters shown in this text box will be displayed in the grid below, from which they can be inserted into the map by 
        ///clicking (or using drag-drop).
        ///
        ///When the map is successfully compiled, any code point values in the Left- [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SampleBox {
            get {
                return ResourceManager.GetString("SampleBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///These radio buttons can be used to select the format for the code point values
        ///sent to the map Editor window. 
        ///
        ///If this dialog is displaying a Legacy encoding, then the &apos;Decimal&apos; and 
        ///&apos;Hexadecimal&apos; buttons will be visible. If you click on the cell for the letter 
        ///&apos;A&apos;, for example, and have the &apos;Decimal&apos; button selected, then the value &apos;65&apos;
        ///will be sent to the map editor. If you have &apos;Hexadecimal&apos; selected, then the
        ///value &apos;0x41&apos; (the hex equivalent of &apos;65&apos;) will be sent to the map editor.
        ///
        ///If this [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SendToEditorHelpString {
            get {
                return ResourceManager.GetString("SendToEditorHelpString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///This button is for choosing the characters to display in the table above based on 
        ///the Unicode range rather than code point values. If you click this button, then
        ///the box to the right will display Unicode Range names rather than code point values.
        ///The Unicode Range names can be customized by modifying the file UnicodeRanges.xml 
        ///located in the same folder as this executable (normally, 
        ///&quot;C:\Program Files\SIL\SILConverters&quot;).
        ///    .
        /// </summary>
        internal static string UnicodeRangesHelpString {
            get {
                return ResourceManager.GetString("UnicodeRangesHelpString", resourceCulture);
            }
        }
    }
}
